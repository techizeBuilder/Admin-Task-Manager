import express from 'express';
import { authenticateToken } from "../middleware/roleAuth.js";
import { storage } from "../mongodb-storage.js";
import { emailService } from "../services/emailService.js";

const router = express.Router();

// Check if email exists
router.post("/check-email-exists", authenticateToken, async (req, res) => {press from 'express';
import { authenticateToken } from "../middleware/roleAuth.js";
import { storage } from "../mongodb-storage.js";
import { emailService } from "../services/emailService.js";

const router = express.Router();

// Check email exists route
router.post("/check-email-exists", authenticateToken, async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ message: "Email is required" });
    }

    console.log("Checking email:", email);
    const token = req.header("Authorization")?.replace("Bearer ", "");
    console.log("Using token:", token ? "Present" : "Missing");

    // Check if user already exists
    const existingUser = await storage.getUserByEmail(email);

    if (existingUser && existingUser.organization?.toString() === req.user.organizationId) {
      return res.json({ 
        exists: true,
          message: "This email is already a member of your organization"
        });
      }

      // Check if invitation already sent
      const existingInvite = await storage.getPendingUserByEmail(email);
      if (existingInvite && existingInvite.organization?.toString() === req.user.organizationId) {
        return res.json({ 
          exists: true,
          message: "This email has already been invited to your organization"
        });
      }

      res.json({ exists: false });
    } catch (error) {
      console.error("Check email error:", error);
      res.status(500).json({ message: "Failed to check email" });
    }
  });

  // Simple check for existing invitations (no auth required for testing)
  app.post("/api/organization/check-invitation", async (req, res) => {
    try {
      const { email } = req.body;

      if (!email) {
        return res.status(400).json({ message: "Email is required" });
      }

      console.log("Checking invitation for email:", email);

      // Check if user already exists
      const existingUser = await storage.getUserByEmail(email);
      console.log("Existing user found:", existingUser ? "Yes" : "No");

      if (existingUser) {
        console.log("User is already a member of an organization");
        return res.json({
          exists: true,
          type: "existing_user",
          message: "This email is already a member of an organization",
        });
      }

      // Check if invitation already sent
      const existingInvite = await storage.getPendingUserByEmail(email);
      console.log("Existing invite found:", existingInvite ? "Yes" : "No");

      if (existingInvite) {
        console.log("Invitation already sent to this email");
        return res.json({
          exists: true,
          type: "pending_invitation",
          message: "This email has already received an invitation. Try another email.",
        });
      }

      console.log("Email is available for invitation");
      res.json({ exists: false });
    } catch (error) {
      console.error("Check invitation error:", error);
      res.status(500).json({
        message: "Failed to check invitation status",
        error: error.message,
      });
    }
  });

  // Testing endpoint for user invitations (no auth required for testing)
  app.post("/api/organization/invite-users-test", async (req, res) => {
    try {
      const { invites } = req.body;

      if (!invites || !Array.isArray(invites) || invites.length === 0) {
        return res.status(400).json({ message: "Invalid invitation data" });
      }

      const results = {
        successCount: 0,
        errors: [],
        details: [],
      };

      // Get the first organization for testing (temporary fix)
      const organizations = await storage.getAllCompanies();
      const defaultOrgId = organizations.length > 0 ? organizations[0]._id : null;

      if (!defaultOrgId) {
        return res.status(400).json({ message: "No organization found for invitations" });
      }

      for (const invite of invites) {
        try {
          const inviteData = {
            email: invite.email,
            organizationId: defaultOrgId,
            roles: invite.roles,
            invitedBy: defaultOrgId, // Use org ID as placeholder
            invitedByName: "TaskSetu Admin",
            organizationName: "TaskSetu Organization",
          };

          await storage.inviteUserToOrganization(inviteData);
          results.successCount++;
          results.details.push({ email: invite.email, status: "success" });
        } catch (error) {
          console.error("Invitation error for", invite.email, ":", error.message);
          results.errors.push({ email: invite.email, error: error.message });
          results.details.push({
            email: invite.email,
            status: "error",
            error: error.message,
          });
        }
      }

      const statusCode = results.successCount > 0 ? 200 : 400;
      const message =
        results.successCount === invites.length
          ? "All invitations sent successfully"
          : results.successCount > 0
            ? "Some invitations sent successfully"
            : "Failed to send invitations";

      res.status(statusCode).json({
        message,
        ...results,
      });
    } catch (error) {
      console.error("Invite users error:", error);
      res.status(500).json({ message: "Failed to process invitations" });
    }
  });

  // Production endpoint for sending invitations (requires authentication)
  app.post("/api/organization/invite-users", authenticateToken, async (req, res) => {
    console.log("Received invitation request:", req.body); // Debug log
    try {
      const { invites } = req.body;
      const adminUser = req.user;

      if (!invites || !Array.isArray(invites) || invites.length === 0) {
        return res.status(400).json({ message: "Invalid invitation data" });
      }

      const results = {
        success: [],
        errors: [],
        details: []
      };

      // Validate each invitation
      for (const invite of invites) {
        try {
          // Basic validation
          if (!invite.name || !invite.email || !invite.role || !invite.licenseId) {
            results.errors.push({
              email: invite.email || 'unknown',
              error: 'All required fields must be provided (name, email, role, licenseId)'
            });
            continue;
          }

      for (const invite of invites) {
        try {
          // Validate using the schema
          const validatedInvite = userInvitationSchema.parse(invite);
          
          // Check license availability
          const licenseAvailable = await checkLicenseAvailability(validatedInvite.licenseId);
          if (!licenseAvailable) {
            results.errors.push({ 
              email: validatedInvite.email, 
              error: `License type "${validatedInvite.licenseId}" is not available` 
            });
            continue;
          }
          }

          // Validate email format
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(invite.email)) {
            results.errors.push({ email: invite.email, error: "Invalid email format" });
            continue;
          }

          // Check if user already exists
          const existingUser = await storage.getUserByEmail(invite.email);
          if (existingUser) {
            results.errors.push({ email: invite.email, error: "User already exists" });
            continue;
          }

          // Generate invitation token
          const inviteToken = storage.generateEmailVerificationToken();
          const inviteExpiry = new Date(Date.now() + 72 * 60 * 60 * 1000); // 72 hours

          // Create user in pending state
          const newUser = await storage.createUser({
            email: invite.email.toLowerCase(),
            name: invite.name,
            roles: [invite.role],
            department: invite.department || "",
            designation: invite.designation || "",
            location: invite.location || "",
            licenseType: invite.licenseType,
            organization: adminUser.organizationId,
            status: "pending",
            inviteToken,
            inviteTokenExpiry: inviteExpiry,
            invitedBy: adminUser.id,
            invitedAt: new Date()
          });

          // Send invitation email if requested
          if (invite.sendInvitationEmail) {
            const organization = await storage.getOrganization(adminUser.organizationId);
            await emailService.sendInvitationEmail(
              invite.email,
              inviteToken,
              organization.name,
              invite.roles,
              `${adminUser.firstName} ${adminUser.lastName}`
            );
          }

          results.success.push({
            email: invite.email,
            userId: newUser._id,
            status: "pending"
          });

        } catch (error) {
          console.error(`Error inviting user ${invite.email}:`, error);
          results.errors.push({ email: invite.email, error: error.message });
        }
      }

      res.json({
        message: `Successfully invited ${results.success.length} users`,
        results
      });
    } catch (error) {
      console.error("Invite users error:", error);
      res.status(500).json({ message: "Failed to process invitations" });
    }
  });
};
