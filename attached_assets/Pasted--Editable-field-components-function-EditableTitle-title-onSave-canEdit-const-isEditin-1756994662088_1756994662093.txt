
// Editable field components
function EditableTitle({ title, onSave, canEdit }) {
  const [isEditing, setIsEditing] = useState(false);
  const [editValue, setEditValue] = useState(title);

  const handleSave = () => {
    if (editValue.trim() && editValue !== title) {
      onSave(editValue.trim());
    }
    setIsEditing(false);
  };

  const handleCancel = () => {
    setEditValue(title);
    setIsEditing(false);
  };

  if (!canEdit) {
    return <h1 className="task-title readonly">{title}</h1>;
  }

  if (isEditing) {
    return (
      <div className="editable-title-container">
        <input
          type="text"
          value={editValue}
          onChange={(e) => setEditValue(e.target.value)}
          onBlur={handleSave}
          onKeyDown={(e) => {
            if (e.key === "Enter") handleSave();
            if (e.key === "Escape") handleCancel();
          }}
          autoFocus
          className="editable-title-input"
          maxLength={100}
        />
      </div>
    );
  }

  return (
    <h1 className="task-title editable" onClick={() => setIsEditing(true)}>
      {title}
      <span className="edit-icon">‚úèÔ∏è</span>
    </h1>
  );
}

function EditableTextArea({ value, onSave, canEdit, placeholder }) {
  const [isEditing, setIsEditing] = useState(false);
  const [editValue, setEditValue] = useState(value);

  const handleSave = () => {
    if (editValue !== value) {
      onSave(editValue);
    }
    setIsEditing(false);
  };

  if (!canEdit) {
    return (
      <p className="readonly-text text-xs text-gray-700">
        {value || placeholder}
      </p>
    );
  }

  if (isEditing) {
    return (
      <div className="editable-textarea-container">
        <textarea
          value={editValue}
          onChange={(e) => setEditValue(e.target.value)}
          onBlur={handleSave}
          autoFocus
          className="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-transparent resize-none"
          rows="2"
          placeholder={placeholder}
        />
      </div>
    );
  }

  return (
    <div
      className="editable-text-display cursor-pointer text-xs p-1 rounded hover:bg-gray-100 group"
      onClick={() => setIsEditing(true)}
    >
      <p className="text-gray-700">{value || placeholder}</p>
      <span className="edit-icon opacity-0 group-hover:opacity-100 text-xs">
        ‚úèÔ∏è
      </span>
    </div>
  );
}

function EditableTextField({ value, onSave, canEdit }) {
  const [isEditing, setIsEditing] = useState(false);
  const [editValue, setEditValue] = useState(value);

  const handleSave = () => {
    if (editValue !== value) {
      onSave(editValue);
    }
    setIsEditing(false);
  };

  if (!canEdit) {
    return <span className="readonly-text text-xs">{value}</span>;
  }

  if (isEditing) {
    return (
      <input
        type="text"
        value={editValue}
        onChange={(e) => setEditValue(e.target.value)}
        onBlur={handleSave}
        onKeyDown={(e) => {
          if (e.key === "Enter") handleSave();
          if (e.key === "Escape") {
            setEditValue(value);
            setIsEditing(false);
          }
        }}
        autoFocus
        className="w-full px-1 py-0.5 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-blue-500"
      />
    );
  }

  return (
    <span
      className="editable-field cursor-pointer text-xs hover:bg-gray-100 px-1 py-0.5 rounded group"
      onClick={() => setIsEditing(true)}
    >
      {value}
      <span className="edit-icon opacity-0 group-hover:opacity-100 ml-1 text-xs">
        ‚úèÔ∏è
      </span>
    </span>
  );
}

function EditableDateField({ value, onSave, canEdit }) {
  const [isEditing, setIsEditing] = useState(false);
  const [editValue, setEditValue] = useState(value);

  const handleSave = () => {
    if (editValue !== value) {
      onSave(editValue);
    }
    setIsEditing(false);
  };

  if (!canEdit) {
    return <span className="readonly-text text-xs">{value}</span>;
  }

  if (isEditing) {
    return (
      <input
        type="date"
        value={editValue}
        onChange={(e) => setEditValue(e.target.value)}
        onBlur={handleSave}
        autoFocus
        className="w-full px-1 py-0.5 text-xs border border-gray-300 rounded focus:ring-1 focus:ring-blue-500"
      />
    );
  }

  return (
    <span
      className="editable-field cursor-pointer text-xs hover:bg-gray-100 px-1 py-0.5 rounded group"
      onClick={() => setIsEditing(true)}
    >
      {value}
      <span className="edit-icon opacity-0 group-hover:opacity-100 ml-1 text-xs">
        ‚úèÔ∏è
      </span>
    </span>
  );
}

// Existing components (SubtasksPanel, LinkedItemsPanel, etc.)
function SubtasksPanel({ subtasks, onCreateSubtask, parentTask, currentUser }) {
  const [filter, setFilter] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [showInlineAdd, setShowInlineAdd] = useState(false);
  const [selectedSubtask, setSelectedSubtask] = useState(null);
  const [subtaskList, setSubtaskList] = useState(subtasks);
  const [isCollapsed, setIsCollapsed] = useState(true); // Default collapsed as per requirement

  const filteredSubtasks = subtaskList.filter((subtask) => {
    // Search filter based on title
    const matchesSearch =
      searchTerm === "" ||
      subtask.title.toLowerCase().includes(searchTerm.toLowerCase());

    // Status filter - handle both legacy and normalized status values
    const matchesStatus =
      filter === "all" ||
      (filter === "todo" &&
        (subtask.status === "to-do" ||
          subtask.status === "OPEN" ||
          subtask.status === "pending")) ||
      (filter === "in-progress" &&
        (subtask.status === "in-progress" ||
          subtask.status === "INPROGRESS")) ||
      (filter === "completed" &&
        (subtask.status === "completed" || subtask.status === "DONE"));

    return matchesSearch && matchesStatus;
  });

  const handleCreateSubtask = (subtaskData) => {
    const newSubtask = {
      id: Date.now(),
      ...subtaskData,
      parentTaskId: parentTask.id,
      createdAt: new Date().toISOString(),
      createdBy: currentUser.name,
    };
    setSubtaskList([...subtaskList, newSubtask]);
    setShowInlineAdd(false);
  };

  const handleUpdateSubtask = (updatedSubtask) => {
    setSubtaskList(
      subtaskList.map((st) =>
        st.id === updatedSubtask.id ? updatedSubtask : st,
      ),
    );
  };

  const handleDeleteSubtask = (subtaskId) => {
    setSubtaskList(subtaskList.filter((st) => st.id !== subtaskId));
    if (selectedSubtask?.id === subtaskId) {
      setSelectedSubtask(null);
    }
  };

  const canEditSubtask = (subtask) => {
    return (
      subtask.createdBy === currentUser.name ||
      subtask.assignee === currentUser.name ||
      currentUser.role === "admin"
    );
  };

  const canDeleteSubtask = (subtask) => {
    return (
      subtask.createdBy === currentUser.name || currentUser.role === "admin"
    );
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case "completed":
        return "‚úÖ";
      case "in-progress":
        return "üîÑ";
      case "to-do":
        return "‚≠ï";
      case "OPEN":
        return "‚≠ï";
      case "INPROGRESS":
        return "üîÑ";
      case "DONE":
        return "‚úÖ";
      case "ONHOLD":
        return "‚è∏Ô∏è";
      default:
        return "‚≠ï";
    }
  };

  const completedCount = subtaskList.filter(
    (st) => st.status === "completed" || st.status === "DONE",
  ).length;
  const progressPercentage =
    subtaskList.length > 0
      ? Math.round((completedCount / subtaskList.length) * 100)
      : 0;

  return (
    <div className="bg-white border border-gray-200 rounded-lg">
      {/* Compact Header */}
      <div
        className="flex items-center justify-between px-3 py-2 border-b border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors"
        onClick={() => setIsCollapsed(!isCollapsed)}
      >
        <div className="flex items-center gap-2">
          <button className="text-gray-500 hover:text-gray-700 text-xs">
            {isCollapsed ? "‚ñ∂" : "‚ñº"}
          </button>
          <h3 className="text-sm font-medium text-gray-900">
            Sub-tasks ({filteredSubtasks.length}/{subtaskList.length})
          </h3>
          {subtaskList.length > 0 && (
            <div className="flex items-center gap-1">
              <div className="w-12 bg-gray-200 rounded-full h-1">
                <div
                  className="bg-green-500 h-1 rounded-full transition-all duration-300"
                  style={{ width: `${progressPercentage}%` }}
                />
              </div>
              <span className="text-xs text-gray-600">
                {progressPercentage}%
              </span>
            </div>
          )}
        </div>

        {!isCollapsed && (
          <div className="flex items-center gap-1">
            <input
              type="text"
              placeholder="Search subtasks..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="text-xs border border-gray-300 rounded px-2 py-0.5 w-24 focus:w-32 transition-all duration-200"
              onClick={(e) => e.stopPropagation()}
            />
            <select
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              className="text-xs border border-gray-300 rounded px-1 py-0.5"
              onClick={(e) => e.stopPropagation()}
            >
              <option value="all">All Status</option>
              <option value="todo">To Do</option>
              <option value="in-progress">In Progress</option>
              <option value="completed">Completed</option>
            </select>
            <button
              className="px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors"
              onClick={(e) => {
                e.stopPropagation();
                setShowInlineAdd(true);
              }}
            >
              + Add Sub-task
            </button>
          </div>
        )}
      </div>

      {/* Compact Content */}
      {!isCollapsed && (
        <div>
          {showInlineAdd && (
            <div className="px-3 py-2 border-b border-gray-100 bg-blue-50">
              <InlineSubtaskAdd
                parentTask={parentTask}
                currentUser={currentUser}
                onSubmit={handleCreateSubtask}
                onCancel={() => setShowInlineAdd(false)}
              />
            </div>
          )}

          <div>
            {filteredSubtasks.map((subtask, index) => (
              <div key={subtask.id}>
                {/* Sub-task Row */}
                <div
                  className={`border-b border-gray-100 hover:bg-gray-50 transition-colors cursor-pointer ${
                    selectedSubtask?.id === subtask.id
                      ? "bg-blue-50 border-l-2 border-l-blue-500"
                      : ""
                  }`}
                  onClick={() =>
                    setSelectedSubtask(
                      selectedSubtask?.id === subtask.id ? null : subtask,
                    )
                  }
                >
                  <div className="flex items-center justify-between px-3 py-3">
                    {/* Left side - Name */}
                    <div className="flex-1 min-w-0">
                      <div
                        className={`text-sm font-medium truncate ${
                          subtask.status === "completed" ||
                          subtask.status === "DONE"
                            ? "line-through text-gray-500"
                            : "text-gray-900"
                        }`}
                      >
                        {subtask.title}
                      </div>
                    </div>

                    {/* Center - Due Date */}
                    <div className="flex-shrink-0 mx-4">
                      <span
                        className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                          new Date(subtask.dueDate) < new Date() &&
                          subtask.status !== "completed" &&
                          subtask.status !== "DONE"
                            ? "bg-red-100 text-red-800"
                            : "bg-gray-100 text-gray-800"
                        }`}
                      >
                        {subtask.dueDate}
                        {new Date(subtask.dueDate) < new Date() &&
                          subtask.status !== "completed" &&
                          subtask.status !== "DONE" && (
                            <span className="ml-1">‚ö†Ô∏è</span>
                          )}
                      </span>
                    </div>

                    {/* Right side - Assignee Avatar */}
                    <div className="flex items-center gap-2 flex-shrink-0">
                      <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                        <span className="text-xs font-medium text-gray-600">
                          {subtask.assignee?.charAt(0) || "U"}
                        </span>
                      </div>

                      {/* Actions */}
                      <div className="flex items-center gap-1">
                        {canDeleteSubtask(subtask) && (
                          <button
                            className="text-gray-400 hover:text-red-600 transition-colors p-1 opacity-0 group-hover:opacity-100"
                            onClick={(e) => {
                              e.stopPropagation();
                              if (window.confirm("Delete this sub-task?")) {
                                handleDeleteSubtask(subtask.id);
                              }
                            }}
                            title="Delete sub-task"
                          >
                            <svg
                              className="w-4 h-4"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.8558L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                              />
                            </svg>
                          </button>
                        )}
                        <span className="text-gray-400 text-xs">
                          {selectedSubtask?.id === subtask.id ? "‚ñº" : "‚ñ∂"}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Inline Expanded Details - Only show when selected */}
                {selectedSubtask?.id === subtask.id && (
                  <div className="bg-gray-50 border-b border-gray-100 px-6 py-4 animate-slideDown">
                    <InlineSubtaskEditor
                      subtask={subtask}
                      onUpdate={handleUpdateSubtask}
                      onClose={() => setSelectedSubtask(null)}
                      canEdit={canEditSubtask(subtask)}
                    />
                  </div>
                )}
              </div>
            ))}

            {filteredSubtasks.length === 0 && !showInlineAdd && (
              <div className="px-3 py-4 text-center">
                <div className="text-gray-400 mb-2">
                  <svg
                    className="w-8 h-8 mx-auto"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={1}
                      d="M9 5H7a2 2 0 00-2 2v6a2 2 0 002 2h6a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                    />
                  </svg>
                </div>
                <p className="text-gray-600 mb-2 text-sm">
                  {searchTerm
                    ? `No sub-tasks found matching "${searchTerm}"`
                    : "No sub-tasks found."}
                </p>
                {searchTerm ? (
                  <button
                    className="px-2 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-700 transition-colors mr-2"
                    onClick={() => setSearchTerm("")}
                  >
                    Clear Search
                  </button>
                ) : (
                  <button
                    className="px-2 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-700 transition-colors"
                    onClick={() => setShowInlineAdd(true)}
                  >
                    + Create First Sub-task
                  </button>
                )}
                {!searchTerm && (
                  <button
                    className="px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors"
                    onClick={() => setShowInlineAdd(true)}
                  >
                    + Add Sub-task
                  </button>
                )}
              </div>
            )}
          </div>
        </div>
      )}

      {/* Slide-up Panel for Selected Sub-task */}
      {selectedSubtask && (
        <SubtaskSlideUpPanel
          subtask={selectedSubtask}
          onUpdate={handleUpdateSubtask}
          onClose={() => setSelectedSubtask(null)}
          canEdit={canEditSubtask(selectedSubtask)}
          currentUser={currentUser}
        />
      )}
    </div>
  );
}

function InlineSubtaskAdd({ parentTask, currentUser, onSubmit, onCancel }) {
  const [formData, setFormData] = useState({
    title: "",
    assignee: currentUser.name,
    assigneeId: currentUser.id,
    priority: "low",
    dueDate: parentTask.dueDate,
    status: "to-do",
    visibility: parentTask.visibility || "private",
    description: "",
    attachments: [],
  });
  const [files, setFiles] = useState([]);

  const handleFiles = (newFiles) => {
    const selected = Array.from(newFiles);
    setFiles((prev) => [...prev, ...selected]);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    handleFiles(e.dataTransfer.files);
  };

  const handleRemove = (index) => {
    setFiles((prev) => prev.filter((_, i) => i !== index));
  };
  const priorityDueDays = { low: 30, medium: 14, high: 7, critical: 2 };

  const calculateDueDate = (priority) => {
    const today = new Date();
    const daysToAdd = priorityDueDays[priority] || 30;
    const dueDate = new Date(today.getTime() + daysToAdd * 24 * 60 * 60 * 1000);
    return dueDate.toISOString().split("T")[0];
  };

  const handleChange = (e) => {
    const { name, value } = e.target;

    if (name === "priority") {
      setFormData({
        ...formData,
        [name]: value,
        dueDate: calculateDueDate(value),
      });
    } else if (name === "assignee") {
      setFormData({
        ...formData,
        [name]: value,
        assigneeId: value === currentUser.name ? currentUser.id : 2,
      });
    } else {
      setFormData({
        ...formData,
        [name]: value,
      });
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (formData.title.trim()) {
      onSubmit(formData);
    }
  };

  const handleKeyPress = (e) => {
    if (
      e.key === "Enter" &&
      !e.shiftKey &&
      e.target.name === "title" &&
      formData.title.trim()
    ) {
      e.preventDefault();
      handleSubmit(e);
    } else if (e.key === "Escape") {
      onCancel();
    }
  };

  return (
    <div className="bg-white rounded-lg border border-gray-200 shadow-sm">
      <form onSubmit={handleSubmit} className="p-3">
        {/* Compact Header */}
        <div className="flex items-center gap-2 mb-3">
          <div className="w-6 h-6 bg-blue-500 rounded-md flex items-center justify-center">
            <span className="text-white text-xs">+</span>
          </div>
          <h4 className="text-sm font-medium text-gray-900">Add Sub-task</h4>
        </div>

        {/* Compact Form Fields */}
        <div className="space-y-2">
          {/* Title */}
          <div>
            <input
              type="text"
              name="title"
              value={formData.title}
              onChange={handleChange}
              placeholder="Sub-task title (required)"
              maxLength={60}
              required
              autoFocus
              className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
              onKeyDown={handleKeyPress}
            />
          </div>

          {/* Two Column Grid */}
          <div className="grid grid-cols-2 gap-2">
            <select
              name="assignee"
              value={formData.assignee}
              onChange={handleChange}
              required
              className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value={currentUser.name}>Self</option>
              {/* Only show team members if user has permission to assign to others */}
              {(currentUser.role === "admin" ||
                currentUser.role === "team") && (
                <>
                  <option value="John Smith">John Smith</option>
                  <option value="Sarah Wilson">Sarah Wilson</option>
                  <option value="Mike Johnson">Mike Johnson</option>
                  <option value="Emily Davis">Emily Davis</option>
                </>
              )}
            </select>

            <select
              name="priority"
              value={formData.priority}
              onChange={handleChange}
              className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="low">Low Priority</option>
              <option value="medium">Medium Priority</option>
              <option value="high">High Priority</option>
              <option value="critical">Critical</option>
            </select>
          </div>

          <div className="grid grid-cols-3 gap-2">
            <input
              type="date"
              name="dueDate"
              value={formData.dueDate}
              onChange={handleChange}
              required
              min={new Date().toISOString().split("T")[0]} // üëà restricts past dates
              className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
            />

            <select
              name="status"
              value={formData.status}
              onChange={handleChange}
              className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="to-do">To Do</option>
              <option value="in-progress">In Progress</option>
              <option value="blocked">Blocked</option>
              <option value="completed">Completed</option>
            </select>

            <select
              name="visibility"
              value={formData.visibility}
              onChange={handleChange}
              className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
              disabled={currentUser.role === "individual"}
            >
              <option value="private">Private</option>
              <option value="team">Team</option>
              {currentUser.role === "admin" && (
                <option value="company">Company</option>
              )}
            </select>
          </div>

          {/* Notes/Description */}
          <div>
            <ReactQuill
              theme="snow"
              className="w-full custom-editor text-sm border border-gray-300 rounded-md focus-within:ring-1 focus-within:ring-blue-500 focus-within:border-blue-500"
              value={formData.description}
              onChange={(content) => handleInputChange("description", content)}
              placeholder="Add notes or description... (supports rich text)"
            />
            <div className="text-xs text-gray-500 mt-1">
              Use Tab to navigate fields, Enter to submit form
            </div>
          </div>

          {/* Attachments Section */}
          <div
            className="bg-gray-50 p-3 rounded-md border border-dashed border-gray-300"
            onDrop={handleDrop}
            onDragOver={(e) => e.preventDefault()}
          >
            <div className="flex items-center gap-2 mb-2">
              <span className="text-sm font-medium text-gray-700">
                üìé Attachments
              </span>
              <span className="text-xs text-gray-500">(Optional)</span>
            </div>

            <div className="text-xs text-gray-500">
              Drag & drop files here or{" "}
              <label className="text-blue-600 hover:text-blue-800 underline cursor-pointer">
                browse files
                <input
                  type="file"
                  className="hidden"
                  multiple
                  onChange={(e) => handleFiles(e.target.files)}
                />
              </label>
            </div>

            {/* File Preview List */}
            {files.length > 0 && (
              <ul className="mt-3 space-y-2">
                {files.map((file, index) => (
                  <li
                    key={index}
                    className="flex items-center justify-between text-sm bg-white border px-2 py-1 rounded"
                  >
                    <span className="truncate max-w-[200px]">{file.name}</span>
                    <button
                      type="button"
                      onClick={() => handleRemove(index)}
                      className="text-red-500 hover:text-red-700 text-xs"
                    >
                      ‚úï
                    </button>
                  </li>
                ))}
              </ul>
            )}
          </div>

          {/* Enhanced Inheritance Info */}
          <div className="bg-blue-50 border border-blue-200 p-3 rounded-md">
            <div className="flex items-center gap-2 mb-2">
              <span className="text-blue-600 text-sm">üîó</span>
              <span className="text-xs font-medium text-blue-800">
                Inheritance Rules
              </span>
            </div>
            <div className="grid grid-cols-2 gap-2 text-xs text-blue-700">
              <div>
                <span className="font-medium">Visibility:</span> Inherits "
                {parentTask.visibility || "Private"}"
                {currentUser.role !== "individual" && " (can override)"}
              </div>
              <div>
                <span className="font-medium">Suggested Due:</span>{" "}
                {parentTask.dueDate}
              </div>
              <div>
                <span className="font-medium">Priority Impact:</span> Changes
                due date automatically
              </div>
              <div>
                <span className="font-medium">Max Length:</span> Title 60 chars
              </div>
            </div>
          </div>
        </div>

        {/* Action Buttons with justify-between */}
        <div className="flex justify-between gap-2 pt-3 mt-3 border-t border-gray-200">
          <button
            type="button"
            className="px-3 py-1.5 text-sm border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
            onClick={onCancel}
          >
            Cancel
          </button>
          <button
            type="submit"
            className="px-3 py-1.5 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
            disabled={!formData.title.trim()}
          >
            Create Sub-task
          </button>
        </div>
      </form>
    </div>
  );
}

function SubtaskSummary({
  subtask,
  isExpanded,
  onExpand,
  onUpdate,
  onDelete,
  canEdit,
  canDelete,
  currentUser,
}) {
  const [editingField, setEditingField] = useState(null);
  const [editValue, setEditValue] = useState("");
  const [isHovered, setIsHovered] = useState(false);

  const handleFieldEdit = (field, currentValue) => {
    if (!canEdit) return;
    setEditingField(field);
    setEditValue(currentValue);
  };

  const handleFieldSave = () => {
    if (editingField && editValue !== subtask[editingField]) {
      const updatedSubtask = { ...subtask, [editingField]: editValue };
      onUpdate(updatedSubtask);
    }
    setEditingField(null);
    setEditValue("");
  };

  const handleFieldCancel = () => {
    setEditingField(null);
    setEditValue("");
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      handleFieldSave();
    } else if (e.key === "Escape") {
      handleFieldCancel();
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case "completed":
        return "‚úÖ";
      case "in-progress":
        return "üîÑ";
      case "blocked":
        return "üö´";
      case "DONE":
        return "‚úÖ";
      case "INPROGRESS":
        return "üîÑ";
      case "to-do":
      case "OPEN":
        return "‚≠ï";
      default:
        return "üìù";
    }
  };

  const isOverdue = () => {
    const today = new Date().toISOString().split("T")[0];
    return (
      subtask.dueDate < today &&
      subtask.status !== "completed" &&
      subtask.status !== "DONE"
    );
  };

  const isCompleted =
    subtask.status === "completed" || subtask.status === "DONE";

  return (
    <div
      className={`subtask-summary ${isExpanded ? "expanded" : ""} ${
        isOverdue() ? "overdue" : ""
      } ${isCompleted ? "completed-task" : ""}`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="subtask-summary-main" onClick={onExpand}>
        <div className="subtask-info">
          <span
            className={`status-indicator ${
              subtask.status === "completed" || subtask.status === "DONE"
                ? "completed"
                : subtask.status === "in-progress" ||
                    subtask.status === "INPROGRESS"
                  ? "in-progress"
                  : subtask.status === "to-do" || subtask.status === "OPEN"
                    ? "to-do"
                    : ""
            }`}
          >
            {getStatusIcon(subtask.status)}
          </span>

          <div className="subtask-details">
            {editingField === "title" ? (
              <input
                type="text"
                value={editValue}
                onChange={(e) => setEditValue(e.target.value)}
                onBlur={handleFieldSave}
                onKeyDown={handleKeyPress}
                autoFocus
                className="inline-edit-input"
                maxLength={60}
                onClick={(e) => e.stopPropagation()}
              />
            ) : (
              <h4
                className={`subtask-title ${isCompleted ? "completed" : ""} ${
                  canEdit ? "editable-field" : ""
                }`}
                onClick={(e) => {
                  e.stopPropagation();
                  if (canEdit) handleFieldEdit("title", subtask.title);
                }}
              >
                {subtask.title}
                {canEdit && isHovered && (
                  <span className="edit-icon-small">‚úèÔ∏è</span>
                )}
              </h4>
            )}

            <div className="subtask-meta">
              <div className="assignee-info">
                <span className="assignee-avatar">
                  {subtask.assignee?.charAt(0) || "U"}
                </span>
                <span className="assignee-name">{subtask.assignee}</span>
              </div>

              <div
                className={`due-date ${isOverdue() ? "overdue" : ""} ${
                  canEdit ? "editable-field" : ""
                }`}
              >
                {editingField === "dueDate" ? (
                  <input
                    type="date"
                    value={editValue}
                    onChange={(e) => setEditValue(e.target.value)}
                    onBlur={handleFieldSave}
                    onKeyDown={handleKeyPress}
                    autoFocus
                    className="inline-edit-input"
                    onClick={(e) => e.stopPropagation()}
                  />
                ) : (
                  <span
                    onClick={(e) => {
                      e.stopPropagation();
                      if (canEdit) handleFieldEdit("dueDate", subtask.dueDate);
                    }}
                  >
                    Due: {subtask.dueDate}
                    {canEdit && isHovered && (
                      <span className="edit-icon-small">‚úèÔ∏è</span>
                    )}
                  </span>
                )}
              </div>

              {editingField === "priority" ? (
                <select
                  value={editValue}
                  onChange={(e) => setEditValue(e.target.value)}
                  onBlur={handleFieldSave}
                  onKeyDown={handleKeyPress}
                  autoFocus
                  className="inline-edit-select"
                  onClick={(e) => e.stopPropagation()}
                >
                  <option value="low">Low</option>
                  <option value="medium">Medium</option>
                  <option value="high">High</option>
                  <option value="critical">Critical</option>
                </select>
              ) : (
                <span
                  className={`priority-indicator ${subtask.priority} ${
                    canEdit ? "editable-field" : ""
                  }`}
                  onClick={(e) => {
                    e.stopPropagation();
                    if (canEdit) handleFieldEdit("priority", subtask.priority);
                  }}
                >
                  {subtask.priority}
                  {canEdit && isHovered && (
                    <span className="edit-icon-small">‚úèÔ∏è</span>
                  )}
                </span>
              )}
            </div>
          </div>
        </div>

        <div className="expand-indicator">{isExpanded ? "‚ñº" : "‚ñ∂"}</div>
      </div>

      <div className="subtask-actions" onClick={(e) => e.stopPropagation()}>
        {canDelete && (
          <button
            className="btn-action delete"
            onClick={() => {
              if (
                window.confirm("Are you sure you want to delete this sub-task?")
              ) {
                onDelete(subtask.id);
              }
            }}
            title="Delete sub-task"
          >
            üóëÔ∏è
          </button>
        )}
      </div>
    </div>
  );
}

// Enhanced Subtask Status Dropdown Component
function SubtaskStatusDropdown({ subtask, onUpdate, canEdit }) {
  const [isOpen, setIsOpen] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);

  const statuses = [
    {
      value: "OPEN",
      label: "To Do",
      color: "#6b7280",
      icon: "‚≠ï",
      description: "Not started yet",
    },
    {
      value: "INPROGRESS",
      label: "In Progress",
      color: "#3b82f6",
      icon: "üîÑ",
      description: "Currently working on",
    },
    {
      value: "DONE",
      label: "Completed",
      color: "#10b981",
      icon: "‚úÖ",
      description: "Successfully finished",
    },
    {
      value: "ONHOLD",
      label: "On Hold",
      color: "#f59e0b",
      icon: "‚è∏Ô∏è",
      description: "Temporarily paused",
    },
  ];

  // Map legacy status values to new ones
  const normalizeStatus = (status) => {
    switch (status) {
      case "to-do":
      case "pending":
        return "OPEN";
      case "in-progress":
        return "INPROGRESS";
      case "completed":
        return "DONE";
      case "blocked":
        return "ONHOLD";
      default:
        return status;
    }
  };

  const normalizedStatus = normalizeStatus(subtask.status);
  const currentStatus =
    statuses.find((s) => s.value === normalizedStatus) || statuses[0];

  const handleStatusChange = async (newStatus) => {
    if (newStatus.value === currentStatus.value) {
      setIsOpen(false);
      return;
    }

    setIsUpdating(true);

    try {
      const updatedSubtask = {
        ...subtask,
        status: newStatus.value,
        updatedAt: new Date().toISOString(),
      };

      // Simulate a brief delay for better UX feedback
      await new Promise((resolve) => setTimeout(resolve, 300));

      onUpdate(updatedSubtask);

      // Show success feedback
      console.log(
        `‚úÖ Subtask status updated: "${subtask.title}" ‚Üí ${newStatus.label}`,
      );

      // Create a temporary visual feedback
      const event = new CustomEvent("showToast", {
        detail: {
          message: `Status changed to ${newStatus.label}`,
          type: "success",
          duration: 2000,
        },
      });
      window.dispatchEvent(event);
    } catch (error) {
      console.error("Failed to update subtask status:", error);

      // Show error feedback
      const event = new CustomEvent("showToast", {
        detail: {
          message: "Failed to update status",
          type: "error",
          duration: 3000,
        },
      });
      window.dispatchEvent(event);
    } finally {
      setIsUpdating(false);
      setIsOpen(false);
    }
  };

  return (
    <div className="subtask-status-dropdown relative">
      <button
        className={`subtask-status-button inline-flex items-center px-2 py-1 rounded-full text-xs font-medium text-white transition-all duration-200 hover:shadow-md active:scale-95 ${
          isUpdating
            ? "opacity-75 cursor-wait"
            : "cursor-pointer hover:opacity-90"
        }`}
        style={{ backgroundColor: currentStatus.color }}
        onClick={() => !isUpdating && setIsOpen(!isOpen)}
        disabled={isUpdating}
        title={`Current: ${currentStatus.label} - Click to change`}
      >
        <span className="mr-1">
          {isUpdating ? (
            <svg
              className="w-3 h-3 animate-spin"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                className="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
              ></circle>
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
          ) : (
            currentStatus.icon
          )}
        </span>
        {currentStatus.label}
        {!isUpdating && (
          <svg
            className={`ml-1 w-3 h-3 transform transition-transform duration-200 ${
              isOpen ? "rotate-180" : ""
            }`}
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              fillRule="evenodd"
              d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
              clipRule="evenodd"
            />
          </svg>
        )}
      </button>

      {isOpen && !isUpdating && (
        <>
          <div
            className="fixed inset-0 z-10"
            onClick={() => setIsOpen(false)}
          />
          <div className="subtask-status-menu absolute top-full left-0 mt-1 min-w-[12rem] bg-white border border-gray-200 rounded-lg shadow-lg z-20 overflow-hidden">
            {/* Header */}
            <div className="px-3 py-2 bg-gray-50 border-b border-gray-200">
              <div className="text-xs font-medium text-gray-500 uppercase tracking-wide">
                Change Status
              </div>
              <div className="text-xs text-gray-400 mt-1">
                Current: {currentStatus.label}
              </div>
            </div>

            {/* Status Options */}
            <div className="py-1">
              {statuses.map((status) => (
                <button
                  key={status.value}
                  className={`subtask-status-option w-full text-left px-3 py-3 text-xs hover:bg-gray-50 transition-colors flex items-center gap-3 group ${
                    status.value === currentStatus.value
                      ? "bg-blue-50 text-blue-700"
                      : "text-gray-700"
                  }`}
                  onClick={() => handleStatusChange(status)}
                >
                  <span className="flex items-center gap-2">
                    <span
                      className="w-3 h-3 rounded-full flex-shrink-0"
                      style={{ backgroundColor: status.color }}
                    />
                    <span className="text-sm">{status.icon}</span>
                  </span>
                  <div className="flex-1 min-w-0">
                    <div className="font-medium">{status.label}</div>
                    <div className="text-xs text-gray-500 group-hover:text-gray-600">
                      {status.description}
                    </div>
                  </div>
                  {status.value === currentStatus.value && (
                    <span className="text-blue-500 text-xs">‚úì</span>
                  )}
                </button>
              ))}
            </div>

            {/* Footer */}
            <div className="px-3 py-2 bg-gray-50 border-t border-gray-200">
              <div className="text-xs text-gray-500">
                Changes are saved automatically
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
}

// Inline Sub-task Editor Component - Mimics task inline editing behavior
function InlineSubtaskEditor({ subtask, onUpdate, onClose, canEdit }) {
  const [editingField, setEditingField] = useState(null);
  const [editValue, setEditValue] = useState("");
  const [isHovered, setIsHovered] = useState(false);

  const statusOptions = [
    { value: "OPEN", label: "To Do", color: "bg-gray-100 text-gray-800" },
    {
      value: "INPROGRESS",
      label: "In Progress",
      color: "bg-blue-100 text-blue-800",
    },
    { value: "DONE", label: "Completed", color: "bg-green-100 text-green-800" },
    {
      value: "ONHOLD",
      label: "On Hold",
      color: "bg-yellow-100 text-yellow-800",
    },
  ];

  const priorityOptions = [
    { value: "low", label: "Low", color: "bg-green-100 text-green-800" },
    {
      value: "medium",
      label: "Medium",
      color: "bg-yellow-100 text-yellow-800",
    },
    { value: "high", label: "High", color: "bg-orange-100 text-orange-800" },
    { value: "critical", label: "Critical", color: "bg-red-100 text-red-800" },
  ];

  const teamMembers = [
    "John Smith",
    "Sarah Wilson",
    "Mike Johnson",
    "Emily Davis",
  ];

  const handleFieldEdit = (field, currentValue) => {
    if (!canEdit) return;
    setEditingField(field);
    setEditValue(currentValue || "");
  };

  const handleFieldSave = () => {
    if (editingField && editValue !== subtask[editingField]) {
      const updatedSubtask = { ...subtask, [editingField]: editValue };
      onUpdate(updatedSubtask);
    }
    setEditingField(null);
    setEditValue("");
  };

  const handleFieldCancel = () => {
    setEditingField(null);
    setEditValue("");
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && e.target.type !== "textarea") {
      handleFieldSave();
    } else if (e.key === "Escape") {
      handleFieldCancel();
    }
  };

  const getCurrentStatus = () =>
    statusOptions.find((s) => s.value === subtask.status) || statusOptions[0];
  const getCurrentPriority = () =>
    priorityOptions.find((p) => p.value === subtask.priority) ||
    priorityOptions[1];

  return (
    <div
      className="space-y-4 p-4 bg-white border border-gray-200 rounded-lg"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* Header */}
      <div className="flex items-center justify-between border-b border-gray-200 pb-2">
        <h4 className="text-sm font-semibold text-gray-900">
          Sub-task Details
        </h4>
        <button
          onClick={onClose}
          className="text-gray-400 hover:text-gray-600 p-1 rounded-full hover:bg-gray-100"
        >
          <svg
            className="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
      </div>

      {/* Title - Inline Editable */}
      <div>
        <label className="block text-xs font-medium text-gray-700 mb-1">
          Title
        </label>
        {editingField === "title" ? (
          <input
            type="text"
            value={editValue}
            onChange={(e) => setEditValue(e.target.value)}
            onBlur={handleFieldSave}
            onKeyDown={handleKeyPress}
            autoFocus
            className="w-full px-3 py-2 text-sm border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            maxLength={100}
          />
        ) : (
          <div
            className={`p-2 text-sm rounded hover:bg-gray-50 cursor-pointer group transition-colors ${
              canEdit ? "border border-transparent hover:border-gray-300" : ""
            }`}
            onClick={() => canEdit && handleFieldEdit("title", subtask.title)}
          >
            <span className="font-medium">{subtask.title}</span>
            {canEdit && isHovered && (
              <span className="ml-2 text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity">
                ‚úèÔ∏è
              </span>
            )}
          </div>
        )}
      </div>

      {/* Status & Priority - Inline Editable */}
      <div className="grid grid-cols-2 gap-4">
        {/* Status */}
        <div>
          <label className="block text-xs font-medium text-gray-700 mb-1">
            Status
          </label>
          {editingField === "status" ? (
            <select
              value={editValue}
              onChange={(e) => setEditValue(e.target.value)}
              onBlur={handleFieldSave}
              onKeyDown={handleKeyPress}
              autoFocus
              className="w-full px-3 py-2 text-sm border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {statusOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          ) : (
            <div
              className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium cursor-pointer group transition-all ${
                getCurrentStatus().color
              } ${canEdit ? "hover:opacity-80" : ""}`}
              onClick={() =>
                canEdit && handleFieldEdit("status", subtask.status)
              }
            >
              {getCurrentStatus().label}
              {canEdit && isHovered && (
                <span className="ml-1 opacity-0 group-hover:opacity-100 transition-opacity">
                  ‚úèÔ∏è
                </span>
              )}
            </div>
          )}
        </div>

        {/* Priority */}
        <div>
          <label className="block text-xs font-medium text-gray-700 mb-1">
            Priority
          </label>
          {editingField === "priority" ? (
            <select
              value={editValue}
              onChange={(e) => setEditValue(e.target.value)}
              onBlur={handleFieldSave}
              onKeyDown={handleKeyPress}
              autoFocus
              className="w-full px-3 py-2 text-sm border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {priorityOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          ) : (
            <div
              className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium cursor-pointer group transition-all ${
                getCurrentPriority().color
              } ${canEdit ? "hover:opacity-80" : ""}`}
              onClick={() =>
                canEdit && handleFieldEdit("priority", subtask.priority)
              }
            >
              {getCurrentPriority().label}
              {canEdit && isHovered && (
                <span className="ml-1 opacity-0 group-hover:opacity-100 transition-opacity">
                  ‚úèÔ∏è
                </span>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Assignee & Due Date - Inline Editable */}
      <div className="grid grid-cols-2 gap-4">
        {/* Assignee */}
        <div>
          <label className="block text-xs font-medium text-gray-700 mb-1">
            Assignee
          </label>
          {editingField === "assignee" ? (
            <select
              value={editValue}
              onChange={(e) => setEditValue(e.target.value)}
              onBlur={handleFieldSave}
              onKeyDown={handleKeyPress}
              autoFocus
              className="w-full px-3 py-2 text-sm border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {teamMembers.map((member) => (
                <option key={member} value={member}>
                  {member}
                </option>
              ))}
            </select>
          ) : (
            <div
              className={`flex items-center gap-2 p-2 rounded hover:bg-gray-50 cursor-pointer group transition-colors ${
                canEdit ? "border border-transparent hover:border-gray-300" : ""
              }`}
              onClick={() =>
                canEdit && handleFieldEdit("assignee", subtask.assignee)
              }
            >
              <div className="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center">
                <span className="text-xs font-medium text-gray-600">
                  {subtask.assignee?.charAt(0) || "U"}
                </span>
              </div>
              <span className="font-medium">{subtask.assignee}</span>
              {canEdit && isHovered && (
                <span className="ml-auto text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity">
                  ‚úèÔ∏è
                </span>
              )}
            </div>
          )}
        </div>

        {/* Due Date */}
        <div>
          <label className="block text-xs font-medium text-gray-700 mb-1">
            Due Date
          </label>
          {editingField === "dueDate" ? (
            <input
              type="date"
              value={editValue}
              onChange={(e) => setEditValue(e.target.value)}
              onBlur={handleFieldSave}
              onKeyDown={handleKeyPress}
              autoFocus
              className="w-full px-3 py-2 text-sm border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          ) : (
            <div
              className={`p-2 text-sm rounded hover:bg-gray-50 cursor-pointer group transition-colors ${
                canEdit ? "border border-transparent hover:border-gray-300" : ""
              }`}
              onClick={() =>
                canEdit && handleFieldEdit("dueDate", subtask.dueDate)
              }
            >
              <span className="font-medium">
                {subtask.dueDate || "Not set"}
              </span>
              {canEdit && isHovered && (
                <span className="ml-2 text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity">
                  ‚úèÔ∏è
                </span>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Description - Inline Editable */}
      <div>
        <label className="block text-xs font-medium text-gray-700 mb-1">
          Description
        </label>
        {editingField === "description" ? (
          <textarea
            value={editValue}
            onChange={(e) => setEditValue(e.target.value)}
            onBlur={handleFieldSave}
            onKeyDown={(e) => {
              if (e.key === "Escape") {
                handleFieldCancel();
              }
            }}
            autoFocus
            className="w-full px-3 py-2 text-sm border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            rows={3}
            placeholder="Add description..."
          />
        ) : (
          <div
            className={`p-3 text-sm rounded min-h-[60px] hover:bg-gray-50 cursor-pointer group transition-colors ${
              canEdit ? "border border-transparent hover:border-gray-300" : ""
            } ${subtask.description ? "bg-gray-50" : "bg-gray-100"}`}
            onClick={() =>
              canEdit &&
              handleFieldEdit("description", subtask.description || "")
            }
          >
            {subtask.description ? (
              <span>{subtask.description}</span>
            ) : (
              <span className="text-gray-500 italic">
                Click to add description...
              </span>
            )}
            {canEdit && isHovered && (
              <span className="float-right text-gray-400 opacity-0 group-hover:opacity-100 transition-opacity">
                ‚úèÔ∏è
              </span>
            )}
          </div>
        )}
      </div>

      {/* Metadata */}
      <div className="text-xs text-gray-500 pt-2 border-t border-gray-200">
        <div className="flex justify-between">
          <span>
            Created:{" "}
            {subtask.createdAt
              ? new Date(subtask.createdAt).toLocaleDateString()
              : "Unknown"}
          </span>
          <span>By: {subtask.createdBy || "Unknown"}</span>
        </div>
      </div>

      {/* Help Text */}
      {canEdit && isHovered && (
        <div className="text-xs text-blue-600 bg-blue-50 p-2 rounded border border-blue-200">
          üí° Click on any field to edit it inline. Press Enter to save, Escape
          to cancel.
        </div>
      )}
    </div>
  );
}

function SubtaskSlideUpPanel({ subtask, onUpdate, onClose }) {
  const [formData, setFormData] = useState({ ...subtask });
  const [isEditing, setIsEditing] = useState(false);
  const [files, setFiles] = useState([]);
  // keep local state in sync if parent sends a fresh subtask
  useEffect(() => {
    setFormData({ ...subtask });
  }, [subtask]);

  const normalizeDateForInput = (d) => {
    if (!d) return "";
    // Accept Date, ISO string, or yyyy-mm-dd ‚Üí ensure yyyy-mm-dd
    const date =
      typeof d === "string" && d.includes("T") ? new Date(d) : new Date(d);
    if (Number.isNaN(date.getTime())) return typeof d === "string" ? d : "";
    return date.toISOString().split("T")[0];
  };
  const handleFiles = (newFiles) => {
    const selected = Array.from(newFiles);
    setFiles((prev) => [...prev, ...selected]);
  };
  const handleRemove = (index) => {
    setFiles((prev) => prev.filter((_, i) => i !== index));
  };
  const handleDrop = (e) => {
    e.preventDefault();
    handleFiles(e.dataTransfer.files);
  };

  const statusLabel = (status) => {
    switch ((status || "").toUpperCase()) {
      case "OPEN":
        return "To Do";
      case "INPROGRESS":
        return "In Progress";
      case "DONE":
        return "Completed";
      case "ONHOLD":
        return "On Hold";
      case "IN-PROGRESS":
        return "In Progress";
      case "TO-DO":
        return "To Do";
      case "COMPLETED":
        return "Completed";
      default:
        return (status || "").toString();
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => {
      let updated = { ...prev, [name]: value };

      if (name === "priority") {
        const today = new Date();
        let daysToAdd = 0;
        switch (value) {
          case "low":
            daysToAdd = 14;
            break;
          case "medium":
            daysToAdd = 7;
            break;
          case "high":
            daysToAdd = 3;
            break;
          case "critical":
            daysToAdd = 1;
            break;
        }
        const newDueDate = new Date(today.setDate(today.getDate() + daysToAdd));
        updated.dueDate = newDueDate.toISOString().split("T")[0];
      }

      return updated;
    });
  };

  const handleSave = () => {
    onUpdate(formData);
    setIsEditing(false);
  };

  const handleCancel = () => {
    setFormData({ ...subtask });
    setIsEditing(false);
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case "completed":
      case "DONE":
        return "‚úÖ";
      case "in-progress":
      case "INPROGRESS":
        return "üîÑ";
      case "to-do":
      case "OPEN":
        return "‚≠ï";
      case "ONHOLD":
        return "‚è∏Ô∏è";
      default:
        return "üìù";
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "completed":
      case "DONE":
        return "bg-emerald-100 text-emerald-800 border-emerald-200";
      case "in-progress":
      case "INPROGRESS":
        return "bg-blue-100 text-blue-800 border-blue-200";
      case "to-do":
      case "OPEN":
        return "bg-gray-100 text-gray-800 border-gray-200";
      case "ONHOLD":
        return "bg-yellow-100 text-yellow-800 border-yellow-200";
      default:
        return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case "critical":
        return "bg-red-100 text-red-800 border-red-200";
      case "high":
        return "bg-orange-100 text-orange-800 border-orange-200";
      case "medium":
        return "bg-yellow-100 text-yellow-800 border-yellow-200";
      case "low":
        return "bg-green-100 text-green-800 border-green-200";
      default:
        return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-2 overlay-animate">
      <div
        className="absolute inset-0 bg-black/40 backdrop-blur-sm"
        onClick={onClose}
      />
      <div
        className="relative bg-white/95 backdrop-blur-sm rounded-xl shadow-2xl w-full max-w-3xl max-h-[85vh] overflow-hidden modal-animate-slide-right"
        style={{
          boxShadow: "0 25px 50px rgba(0,0,0,0.25)",
          border: "1px solid rgba(255,255,255,0.2)",
        }}
      >
        {/* Header */}
        <div className="relative p-3 border-b border-gray-200/50 bg-gradient-to-r from-blue-50 to-indigo-50 overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-r from-blue-500/10 to-indigo-600/10"></div>
          <div className="relative flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center shadow-sm">
                <span className="text-sm">
                  {getStatusIcon(formData.status)}
                </span>
              </div>
              <div>
                <h3 className="text-sm font-bold text-gray-900">
                  Sub-task Details
                </h3>
                <p className="text-sm text-gray-600 flex items-center gap-1">
                  <span className="w-1.5 h-1.5 bg-blue-500 rounded-full"></span>
                  Parent: #{formData.parentTaskId}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              {/* Toggle Edit/Cancel */}
              <button
                className="px-2 py-1 bg-white/80 backdrop-blur-sm text-blue-600 border border-blue-200 rounded-lg text-xs font-medium hover:bg-blue-50 transition-all duration-300 shadow-sm flex items-center gap-1"
                onClick={() => setIsEditing((prev) => !prev)}
              >
                {isEditing ? (
                  <>
                    <span>‚úï</span>
                    Cancel
                  </>
                ) : (
                  <>
                    <span>‚úèÔ∏è</span>
                    Edit
                  </>
                )}
              </button>

              {/* Close button */}
              <button
                className="w-6 h-6 bg-white/80 backdrop-blur-sm text-gray-500 hover:text-gray-700 rounded-lg hover:bg-gray-50 transition-all duration-300 flex items-center justify-center shadow-sm"
                onClick={onClose}
              >
                <svg
                  className="w-3 h-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            </div>
          </div>
        </div>

        {/* Content */}
        <div
          className="p-3 overflow-y-auto"
          style={{ maxHeight: "calc(85vh - 140px)" }}
        >
          <div className="space-y-3">
            {/* Title */}
            <div className="bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
              <div className="flex items-center gap-2 mb-2">
                <div className="w-5 h-5 bg-blue-100 rounded flex items-center justify-center">
                  <span className="text-blue-600 text-xs font-bold">T</span>
                </div>
                <h4 className="text-sm font-medium text-gray-900">
                  Task Title
                </h4>
              </div>
              {isEditing ? (
                <input
                  type="text"
                  name="title"
                  value={formData.title || ""}
                  onChange={handleChange}
                  className="w-full px-2 py-1.5 text-sm border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all duration-300"
                  maxLength={100}
                  placeholder="Enter task title..."
                />
              ) : (
                <div className="bg-gradient-to-r from-gray-50 to-blue-50 p-2 rounded-lg border border-gray-200">
                  <p className="text-gray-900 font-medium text-xs">
                    {formData.title}
                  </p>
                </div>
              )}
            </div>

            {/* Status & Priority */}
            <div className="grid grid-cols-2 gap-3">
              {/* Status */}
              <div className="bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
                <div className="flex items-center gap-2 mb-2">
                  <div className="w-5 h-5 bg-emerald-100 rounded flex items-center justify-center">
                    <span className="text-emerald-600 text-xs">üéØ</span>
                  </div>
                  <h4 className="text-sm font-medium text-gray-900">Status</h4>
                </div>
                {isEditing ? (
                  <select
                    name="status"
                    value={formData.status || "OPEN"}
                    onChange={handleChange}
                    className="w-full px-2 py-1.5 text-sm border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all duration-300"
                  >
                    <option value="OPEN">To Do</option>
                    <option value="INPROGRESS">In Progress</option>
                    <option value="DONE">Completed</option>
                    <option value="ONHOLD">On Hold</option>
                  </select>
                ) : (
                  <div
                    className={`inline-flex items-center gap-1 px-2 py-1 rounded-lg border text-xs font-medium ${getStatusColor(
                      formData.status,
                    )}`}
                  >
                    <span className="text-sm">
                      {getStatusIcon(formData.status)}
                    </span>
                    <span className="capitalize">
                      {statusLabel(formData.status)}
                    </span>
                  </div>
                )}
              </div>

              {/* Priority */}
              <div className="bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
                <div className="flex items-center gap-2 mb-2">
                  <div className="w-5 h-5 bg-orange-100 rounded flex items-center justify-center">
                    <span className="text-orange-600 text-xs">‚ö°</span>
                  </div>
                  <h4 className="text-sm font-medium text-gray-900">
                    Priority
                  </h4>
                </div>
                {isEditing ? (
                  <select
                    name="priority"
                    value={formData.priority || "low"}
                    onChange={handleChange}
                    className="w-full px-2 py-1.5 text-sm border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all duration-300"
                  >
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                    <option value="critical">Critical</option>
                  </select>
                ) : (
                  <div
                    className={`inline-flex items-center gap-1 px-2 py-1 rounded-lg border text-xs font-medium ${getPriorityColor(
                      formData.priority,
                    )}`}
                  >
                    <span className="capitalize">
                      {formData.priority || "Low"}
                    </span>
                  </div>
                )}
              </div>
            </div>

            {/* Assignee & Due Date */}
            <div className="grid grid-cols-2 gap-3">
              {/* Assignee */}
              <div className="bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
                <div className="flex items-center gap-2 mb-2">
                  <div className="w-5 h-5 bg-purple-100 rounded flex items-center justify-center">
                    <span className="text-purple-600 text-xs">üë§</span>
                  </div>
                  <h4 className="text-sm font-medium text-gray-900">
                    Assignee
                  </h4>
                </div>
                {isEditing ? (
                  <select
                    name="assignee"
                    value={formData.assignee || ""}
                    onChange={handleChange}
                    className="w-full px-2 py-1.5 text-sm border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all duration-300"
                  >
                    <option value="John Smith">John Smith</option>
                    <option value="Sarah Wilson">Sarah Wilson</option>
                    <option value="Mike Johnson">Mike Johnson</option>
                    <option value="Emily Davis">Emily Davis</option>
                  </select>
                ) : (
                  <div className="flex items-center gap-2 p-1.5 bg-gradient-to-r from-gray-50 to-purple-50 rounded-lg border border-gray-200">
                    <div className="w-6 h-6 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-full flex items-center justify-center shadow-sm">
                      <span className="text-white font-bold text-xs">
                        {(formData.assignee || "U").charAt(0)}
                      </span>
                    </div>
                    <div>
                      <p className="font-medium text-gray-900 text-xs">
                        {formData.assignee}
                      </p>
                      <p className="text-xs text-gray-500">Assignee</p>
                    </div>
                  </div>
                )}
              </div>

              {/* Due Date */}
              <div className="bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
                <div className="flex items-center gap-2 mb-2">
                  <div className="w-5 h-5 bg-red-100 rounded flex items-center justify-center">
                    <span className="text-red-600 text-xs">üìÖ</span>
                  </div>
                  <h4 className="text-sm font-medium text-gray-900">
                    Due Date
                  </h4>
                </div>
                {isEditing ? (
                  <input
                    type="date"
                    name="dueDate"
                    value={normalizeDateForInput(formData.dueDate)}
                    min={new Date().toISOString().split("T")[0]}
                    onChange={handleChange}
                    className="w-full px-2 py-1.5 text-sm border border-gray-200 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all duration-300"
                  />
                ) : (
                  <div className="p-1.5 bg-gradient-to-r from-gray-50 to-red-50 rounded-lg border border-gray-200">
                    <p className="font-medium text-gray-900 text-xs">
                      {normalizeDateForInput(formData.dueDate)}
                    </p>
                    <p className="text-xs text-gray-500">Target</p>
                  </div>
                )}
              </div>
            </div>

            {/* Description */}
            <div className="bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
              <div className="flex items-center gap-2 mb-2">
                <div className="w-5 h-5 bg-indigo-100 rounded flex items-center justify-center">
                  <span className="text-indigo-600 text-xs">üìù</span>
                </div>
                <h4 className="text-sm font-medium text-gray-900">
                  Description
                </h4>
              </div>
              {isEditing ? (
                <ReactQuill
                  className="custom-editor"
                  value={formData.description || ""}
                  onChange={(html) =>
                    setFormData((prev) => ({ ...prev, description: html }))
                  }
                />
              ) : (
                <div className="bg-gradient-to-br from-gray-50 to-indigo-50 p-2 rounded-lg border border-gray-200 min-h-[60px]">
                  {formData.description ? (
                    <div
                      className="text-gray-900 leading-relaxed text-xs prose max-w-none"
                      dangerouslySetInnerHTML={{ __html: formData.description }}
                    />
                  ) : (
                    <p className="text-gray-500 italic text-xs">
                      No description provided for this sub-task.
                    </p>
                  )}
                </div>
              )}
            </div>

            {/* Attachments Section */}
            <div
              className="bg-gray-50 p-3 rounded-md border border-dashed border-gray-300"
              onDrop={handleDrop}
              onDragOver={(e) => e.preventDefault()}
            >
              <div className="flex items-center gap-2 mb-2">
                <span className="text-sm font-medium text-gray-700">
                  üìé Attachments
                </span>
                <span className="text-xs text-gray-500">(Optional)</span>
              </div>

              <div className="text-xs text-gray-500">
                Drag & drop files here or{" "}
                <label className="text-blue-600 hover:text-blue-800 underline cursor-pointer">
                  browse files
                  <input
                    type="file"
                    className="hidden"
                    multiple
                    onChange={(e) => handleFiles(e.target.files)}
                  />
                </label>
              </div>

              {/* File Preview List */}
              {files.length > 0 && (
                <ul className="mt-3 space-y-2">
                  {files.map((file, index) => (
                    <li
                      key={index}
                      className="flex items-center justify-between text-sm bg-white border px-2 py-1 rounded"
                    >
                      <span className="truncate max-w-[200px]">
                        {file.name}
                      </span>
                      <button
                        type="button"
                        onClick={() => handleRemove(index)}
                        className="text-red-500 hover:text-red-700 text-xs"
                      >
                        ‚úï
                      </button>
                    </li>
                  ))}
                </ul>
              )}
            </div>

            {/* Metadata */}
            <div className="bg-gradient-to-br from-slate-50 to-gray-100 rounded-lg p-3 border border-gray-200 shadow-sm">
              <div className="flex items-center gap-2 mb-2">
                <div className="w-5 h-5 bg-slate-200 rounded flex items-center justify-center">
                  <span className="text-slate-600 text-xs">‚ÑπÔ∏è</span>
                </div>
                <h4 className="text-sm font-medium text-gray-900">
                  Task Information
                </h4>
              </div>
              <div className="grid grid-cols-2 gap-2">
                <div className="bg-white/60 backdrop-blur-sm p-2 rounded-lg border border-white/50">
                  <span className="text-gray-500 text-xs font-medium">
                    Created by:
                  </span>
                  <p className="text-gray-900 font-medium text-xs">
                    {formData.createdBy}
                  </p>
                </div>
                <div className="bg-white/60 backdrop-blur-sm p-2 rounded-lg border border-white/50">
                  <span className="text-gray-500 text-xs font-medium">
                    Created on:
                  </span>
                  <p className="text-gray-900 font-medium text-xs">
                    {formData.createdAt
                      ? new Date(formData.createdAt).toLocaleDateString(
                          "en-US",
                          { month: "short", day: "numeric", year: "numeric" },
                        )
                      : "-"}
                  </p>
                </div>
                <div className="bg-white/60 backdrop-blur-sm p-2 rounded-lg border border-white/50">
                  <span className="text-gray-500 text-xs font-medium">
                    Visibility:
                  </span>
                  <p className="text-gray-900 font-medium text-xs">
                    {formData.visibility || "Private"}
                  </p>
                </div>
                <div className="bg-white/60 backdrop-blur-sm p-2 rounded-lg border border-white/50">
                  <span className="text-gray-500 text-xs font-medium">
                    Parent ID:
                  </span>
                  <p className="text-gray-900 font-medium text-xs">
                    #{formData.parentTaskId}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        {isEditing && (
          <div className="p-3 border-t border-gray-200/50 bg-gradient-to-r from-gray-50 to-blue-50">
            <div className="flex justify-end gap-2">
              <button
                className="px-3 py-1.5 bg-white border border-gray-300 text-gray-700 rounded-lg text-xs font-medium hover:bg-gray-50 hover:border-gray-400 transition-all duration-300 shadow-sm"
                onClick={handleCancel}
              >
                <span className="mr-1">‚Ü©Ô∏è</span>
                Cancel
              </button>
              <button
                className="px-3 py-1.5 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-lg text-xs font-medium hover:from-blue-600 hover:to-indigo-700 transition-all duration-300 shadow-lg"
                onClick={handleSave}
              >
                <span className="mr-1">üíæ</span>
                Save
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

function SubtaskDetailView({
  subtask,
  onUpdate,
  onClose,
  canEdit,
  currentUser,
}) {
  const [formData, setFormData] = useState({
    ...subtask,
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSave = () => {
    onUpdate(formData);
    onClose();
  };

  return (
    <div className="subtask-detail-view">
      <div className="subtask-detail-header">
        <h4>Sub-task Details</h4>
        <button className="close-button" onClick={onClose}>
          √ó
        </button>
      </div>

      <div className="subtask-detail-content">
        <div className="detail-form">
          <div className="form-row">
            <div className="form-field">
              <label>Status</label>
              <select
                name="status"
                value={formData.status}
                onChange={handleChange}
                disabled={!canEdit}
              >
                <option value="to-do">To Do</option>
                <option value="in-progress">In Progress</option>
                <option value="blocked">Blocked</option>
                <option value="completed">Completed</option>
              </select>
            </div>

            <div className="form-field">
              <label>Priority</label>
              <select
                name="priority"
                value={formData.priority}
                onChange={handleChange}
                disabled={!canEdit}
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="critical">Critical</option>
              </select>
            </div>

            <div className="form-field">
              <label>Assignee</label>
              <select
                name="assignee"
                value={formData.assignee}
                onChange={handleChange}
                disabled={!canEdit}
              >
                <option value="John Smith">John Smith</option>
                <option value="Sarah Wilson">Sarah Wilson</option>
                <option value="Mike Johnson">Mike Johnson</option>
                <option value="Emily Davis">Emily Davis</option>
              </select>
            </div>
          </div>

          <div className="form-field full-width">
            <label>Description</label>
            <ReactQuill
              className="custom-editor"
              value={formData.description || ""}
              onChange={handleChange}
              disabled={!canEdit}
            />
          </div>
        </div>

        <div className="subtask-meta-info">
          <div className="meta-item">
            <strong>Created:</strong>{" "}
            {new Date(subtask.createdAt).toLocaleString()}
          </div>
          <div className="meta-item">
            <strong>Created by:</strong> {subtask.createdBy}
          </div>
          <div className="meta-item">
            <strong>Visibility:</strong> {subtask.visibility}
          </div>
        </div>

        {canEdit && (
          <div className="subtask-detail-actions">
            <button className="btn-secondary" onClick={onClose}>
              Cancel
            </button>
            <button className="btn-primary" onClick={handleSave}>
              Save Changes
            </button>
          </div>
        )}
      </div>
    </div>
  );
}

function LinkedItemsPanel({ linkedItems }) {
  const [showAddModal, setShowAddModal] = useState(false);
  const [filter, setFilter] = useState("all");

  const filteredItems = linkedItems.filter((item) => {
    if (filter === "all") return true;
    return item.type === filter;
  });

  const getItemIcon = (type) => {
    const icons = {
      task: "üìã",
      document: "üìÑ",
      form: "üìù",
      link: "üîó",
    };
    return icons[type] || "üîó";
  };

  const getItemTypeColor = (type) => {
    const colors = {
      task: "bg-blue-100 text-blue-800",
      document: "bg-green-100 text-green-800",
      form: "bg-purple-100 text-purple-800",
      link: "bg-gray-100 text-gray-800",
    };
    return colors[type] || "bg-gray-100 text-gray-800";
  };

  const getStatusColor = (status) => {
    const colors = {
      pending: "bg-yellow-100 text-yellow-800",
      "in-progress": "bg-blue-100 text-blue-800",
      completed: "bg-green-100 text-green-800",
      cancelled: "bg-red-100 text-red-800",
    };
    return colors[status] || "bg-gray-100 text-gray-800";
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-indigo-600 rounded-xl flex items-center justify-center">
            <span className="text-white text-lg">üîó</span>
          </div>
          <div>
            <h2 className="text-xl font-bold text-gray-900">
              Linked Items ({filteredItems.length})
            </h2>
            <p className="text-sm text-gray-600">
              Connected tasks, documents, and resources
            </p>
          </div>
        </div>
        <div className="flex items-center gap-3">
          <select
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            className="form-select text-sm"
          >
            <option value="all">All Types</option>
            <option value="task">Tasks</option>
            <option value="document">Documents</option>
            <option value="form">Forms</option>
            <option value="link">Links</option>
          </select>
          <button
            onClick={() => setShowAddModal(true)}
            className="btn btn-primary flex items-center gap-2 px-4 py-2 w-[200px]"
          >
            <span className="text-sm">‚ûï</span>
            <span>Link Item</span>
          </button>
        </div>
      </div>

      {/* Linked Items Grid */}
      {filteredItems.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-2 lg:grid-cols-2 gap-4">
          {filteredItems.map((item) => (
            <div
              key={item.id}
              className="bg-white rounded-2xl border border-gray-200 p-6 hover:shadow-lg transition-all duration-300 group"
              onClick={() => console.log(`Open ${item.type}:`, item.id)}
            >
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center gap-3">
                  <div className="w-12 h-12 bg-gradient-to-r from-gray-100 to-gray-200 rounded-xl flex items-center justify-center text-xl">
                    {getItemIcon(item.type)}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h4 className="font-semibold text-gray-900 mb-1 truncate group-hover:text-blue-600 transition-colors">
                      {item.title}
                    </h4>
                    <div className="flex items-center gap-2">
                      <span
                        className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getItemTypeColor(
                          item.type,
                        )}`}
                      >
                        {item.type}
                      </span>
                      <span
                        className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(
                          item.status,
                        )}`}
                      >
                        {item.status}
                      </span>
                    </div>
                  </div>
                </div>
                <div className="flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      console.log("View item:", item.id);
                    }}
                    className="w-8 h-8 bg-blue-100 hover:bg-blue-200 rounded-lg flex items-center justify-center text-blue-600 transition-colors"
                    title="View"
                  >
                    <span className="text-sm">üëÅÔ∏è</span>
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      console.log("Unlink item:", item.id);
                    }}
                    className="w-8 h-8 bg-red-100 hover:bg-red-200 rounded-lg flex items-center justify-center text-red-600 transition-colors"
                    title="Unlink"
                  >
                    <span className="text-sm">‚õî</span>
                  </button>
                </div>
              </div>

              {/* Additional info */}
              <div className="text-sm text-gray-500">
                <div className="flex items-center justify-between">
                  <span>Type: {item.type}</span>
                  <span className="flex items-center gap-1">
                    <span className="w-2 h-2 rounded-full bg-blue-500"></span>
                    Connected
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-12">
          <div className="w-20 h-20 bg-gray-100 rounded-2xl flex items-center justify-center mx-auto mb-4">
            <span className="text-3xl">üîó</span>
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            No linked items
          </h3>
          <p className="text-gray-600 mb-4">
            Connect related tasks, documents, or resources
          </p>
          <button
            onClick={() => setShowAddModal(true)}
            className="btn btn-secondary"
          >
            Link First Item
          </button>
        </div>
      )}

      {/* Add Link Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black/30 backdrop-blur-sm bg-opacity-50 flex items-center justify-center z-50 mt-0 overlay-animate">
          <div className="bg-white rounded-2xl shadow-xl max-w-md w-full modal-animate-slide-up">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold text-gray-900">
                  Link New Item
                </h3>
                <button
                  onClick={() => setShowAddModal(false)}
                  className="w-8 h-8 bg-gray-100 hover:bg-gray-200 rounded-lg flex items-center justify-center text-gray-600 transition-colors"
                >
                  <span className="text-sm">‚úï</span>
                </button>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Item Type
                  </label>
                  <select className="form-select w-full">
                    <option value="task">Task</option>
                    <option value="document">Document</option>
                    <option value="form">Form</option>
                    <option value="link">External Link</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Search & Select
                  </label>
                  <input
                    type="text"
                    className="form-input w-full"
                    placeholder="Search for items to link..."
                  />
                </div>

                <div className="flex gap-3 pt-4">
                  <button
                    onClick={() => setShowAddModal(false)}
                    className="btn btn-secondary flex-1"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={() => {
                      console.log("Link item");
                      setShowAddModal(false);
                    }}
                    className="btn btn-primary flex-1"
                  >
                    Link Item
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

function EditableInfoItem({ label, value, type, options, onSave }) {
  const [isEditing, setIsEditing] = useState(false);
  const [editValue, setEditValue] = useState(value);

  const handleSave = () => {
    if (editValue !== value) {
      onSave(editValue);
    }
    setIsEditing(false);
  };

  const handleCancel = () => {
    setEditValue(value);
    setIsEditing(false);
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      handleSave();
    } else if (e.key === "Escape") {
      handleCancel();
    }
  };

  return (
    <div className="info-item editable-info-item">
      <label>{label}</label>
      {isEditing ? (
        <div className="info-edit-container">
          {type === "select" ? (
            <select
              value={editValue}
              onChange={(e) => setEditValue(e.target.value)}
              onBlur={handleSave}
              onKeyDown={handleKeyPress}
              autoFocus
              className="info-edit-select"
            >
              {options.map((option) => (
                <option key={option} value={option}>
                  {option}
                </option>
              ))}
            </select>
          ) : (
            <input
              type={type}
              value={editValue}
              onChange={(e) => setEditValue(e.target.value)}
              onBlur={handleSave}
              onKeyDown={handleKeyPress}
              autoFocus
              className="info-edit-input"
            />
          )}
        </div>
      ) : (
        <div className="info-display" onClick={() => setIsEditing(true)}>
          <span
            className={
              type === "select" && label === "Priority"
                ? `priority-badge ${value}`
                : ""
            }
          >
            {value}
          </span>
          <span className="edit-icon-small">‚úèÔ∏è</span>
        </div>
      )}
    </div>
  );
}

function TaskDeleteModal({ task, onConfirm, onClose, currentUser }) {
  const [deleteOptions, setDeleteOptions] = useState({
    deleteSubtasks: false,
    deleteAttachments: false,
    confirmed: false,
  });

  const hasSubtasks = task?.subtasks && task.subtasks.length > 0;
  const hasAttachments = task?.attachments && task.attachments.length > 0;
  const hasLinkedItems = task?.linkedItems && task.linkedItems.length > 0;

  const handleSubmit = () => {
    if (!deleteOptions.confirmed) {
      alert("Please confirm you understand this action is irreversible");
      return;
    }
    onConfirm(deleteOptions);
  };

  const getWarningMessages = () => {
    const warnings = [];

    if (hasSubtasks) {
      warnings.push(
        `This task has ${task.subtasks.length} subtask(s). Deleting it will delete all subtasks.`,
      );
    }

    if (hasAttachments || hasLinkedItems) {
      warnings.push("All linked forms and files will also be deleted.");
    }

    if (
      task.createdBy !== currentUser.name &&
      task.assigneeId !== currentUser.id
    ) {
      warnings.push("This task was created by another user.");
    }

    return warnings;
  };

  const warnings = getWarningMessages();

  return (
    <div className="modal-overlay">
      <div className="modal-container delete-task-modal">
        <div className="modal-header">
          <h3>üóëÔ∏è Delete Task</h3>
          <button className="close-button" onClick={onClose}>
            √ó
          </button>
        </div>

        <div className="modal-content">
          <div className="delete-task-info">
            <h4>Are you sure you want to delete this task?</h4>
            <div className="task-to-delete">
              <strong>"{task?.title}"</strong>
              <span className={`status-badge ${task?.status}`}>
                {getStatusLabel(task?.status)}
              </span>
            </div>
          </div>

          {warnings.length > 0 && (
            <div className="deletion-warnings">
              <h4>‚ö†Ô∏è Important Notice:</h4>
              <ul>
                {warnings.map((warning, index) => (
                  <li key={index} className="warning-item">
                    {warning}
                  </li>
                ))}
              </ul>
            </div>
          )}

          <div className="deletion-options">
            {hasSubtasks && (
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={deleteOptions.deleteSubtasks}
                  onChange={(e) =>
                    setDeleteOptions({
                      ...deleteOptions,
                      deleteSubtasks: e.target.checked,
                    })
                  }
                />
                <span className="checkmark"></span>
                Also delete all {task.subtasks.length} subtask(s)
              </label>
            )}

            {(hasAttachments || hasLinkedItems) && (
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={deleteOptions.deleteAttachments}
                  onChange={(e) =>
                    setDeleteOptions({
                      ...deleteOptions,
                      deleteAttachments: e.target.checked,
                    })
                  }
                />
                <span className="checkmark"></span>
                Also delete attached forms and files
              </label>
            )}

            <label className="checkbox-label required-confirmation">
              <input
                type="checkbox"
                checked={deleteOptions.confirmed}
                onChange={(e) =>
                  setDeleteOptions({
                    ...deleteOptions,
                    confirmed: e.target.checked,
                  })
                }
                required
              />
              <span className="checkmark"></span>
              <strong>I understand this action is irreversible</strong>
            </label>
          </div>

          <div className="modal-actions">
            <button className="btn-secondary" onClick={onClose}>
              Cancel
            </button>
            <button
              className="btn-danger"
              onClick={handleSubmit}
              disabled={!deleteOptions.confirmed}
            >
              Delete Task
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

function SnoozeModal({ task, onSubmit, onClose }) {
  const [snoozeData, setSnoozeData] = useState({
    snoozeUntil: "",
    note: "",
  });

  // Set default snooze time to next day 9 AM
  React.useEffect(() => {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(9, 0, 0, 0);

    setSnoozeData({
      snoozeUntil: tomorrow.toISOString().slice(0, 16), // Format for datetime-local input
      note: "",
    });
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(snoozeData);
  };

  return (
    <div className="modal-overlay overlay-animate">
      <div className="modal-container modal-animate-fade">
        <div className="modal-header">
          <h3>Snooze Task: {task?.title}</h3>
          <button className="close-button" onClick={onClose}>
            √ó
          </button>
        </div>

        <form onSubmit={handleSubmit} className="modal-content">
          <div className="form-group">
            <label>Snooze until:</label>
            <input
              type="datetime-local"
              value={snoozeData.snoozeUntil}
              onChange={(e) =>
                setSnoozeData({ ...snoozeData, snoozeUntil: e.target.value })
              }
              required
              className="form-input"
            />
          </div>

          <div className="form-group">
            <label>Optional note:</label>
            <textarea
              value={snoozeData.note}
              onChange={(e) =>
                setSnoozeData({ ...snoozeData, note: e.target.value })
              }
              placeholder="Reason for snoozing (optional)"
              className="form-input"
              rows="3"
            />
          </div>

          <div className="modal-actions flex justify-between">
            <button type="button" className="btn-secondary" onClick={onClose}>
              Cancel
            </button>
            <button type="submit" className="btn-primary">
              Snooze Task
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

function ReassignModal({ task, onSubmit, onClose }) {
  const [assignee, setAssignee] = useState(task.assignee);
  const [assigneeId, setAssigneeId] = useState(task.assigneeId);

  const teamMembers = [
    { id: 1, name: "John Smith", avatar: "JS" },
    { id: 2, name: "Sarah Wilson", avatar: "SW" },
    { id: 3, name: "Mike Johnson", avatar: "MJ" },
    { id: 4, name: "Emily Davis", avatar: "ED" },
  ];

  const handleSubmit = (e) => {
    e.preventDefault();
    const newAssignee = teamMembers.find((member) => member.id === assigneeId);
    onSubmit(newAssignee);
  };

  return (
    <div className="modal-overlay">
      <div className="modal-container">
        <div className="modal-header">
          <h3>Reassign Task: {task?.title}</h3>
          <button className="close-button" onClick={onClose}>
            √ó
          </button>
        </div>

        <form onSubmit={handleSubmit} className="modal-content">
          <div className="form-group">
            <label>Select new assignee:</label>
            <select
              value={assigneeId} // Changed from assignee to assigneeId for correct value binding
              onChange={(e) => {
                setAssigneeId(parseInt(e.target.value));
              }}
              required
              className="form-input"
            >
              {teamMembers.map((member) => (
                <option key={member.id} value={member.id}>
                  {member.name}
                </option>
              ))}
            </select>
          </div>

          <div className="modal-actions">
            <button type="button" className="btn-secondary" onClick={onClose}>
              Cancel
            </button>
            <button type="submit" className="btn-primary">
              Reassign Task
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

function SubtaskDrawer({ parentTask, currentUser, onSubmit, onClose }) {
  const [formData, setFormData] = useState({
    title: "",
    assignee: currentUser.name,
    assigneeId: currentUser.id,
    priority: "medium",
    dueDate: "",
    status: "to-do",
    visibility: parentTask.visibility || "private",
    description: "",
    attachments: [],
  });

  const [searchTerm, setSearchTerm] = useState("");
  const [showUserDropdown, setShowUserDropdown] = useState(false);

  // Calculate due date based on priority
  const calculateDueDate = (priority) => {
    const today = new Date();
    const priorityDays = {
      low: 30,
      medium: 14,
      high: 7,
      critical: 2,
      urgent: 2,
    };
    const daysToAdd = priorityDays[priority] || 14;
    const dueDate = new Date(today.getTime() + daysToAdd * 24 * 60 * 60 * 1000);
    return dueDate.toISOString().split("T")[0];
  };

  // Auto-suggest due date when priority changes
  React.useEffect(() => {
    if (formData.priority) {
      setFormData((prev) => ({
        ...prev,
        dueDate: calculateDueDate(formData.priority),
      }));
    }
  }, [formData.priority]);

  // Team members for assignment
  const teamMembers = [
    { id: 1, name: "Current User", avatar: "CU", role: "assignee" },
    { id: 2, name: "John Smith", avatar: "JS", role: "team" },
    { id: 3, name: "Sarah Wilson", avatar: "SW", role: "team" },
    { id: 4, name: "Mike Johnson", avatar: "MJ", role: "team" },
    { id: 5, name: "Emily Davis", avatar: "ED", role: "team" },
  ];

  const filteredMembers = teamMembers.filter((member) =>
    member.name.toLowerCase().includes(searchTerm.toLowerCase()),
  );

  const handleSubmit = (e) => {
    e.preventDefault();
    if (formData.title.trim()) {
      onSubmit(formData);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      if (formData.title.trim()) {
        handleSubmit(e);
      }
    } else if (e.key === "Escape") {
      onClose();
    } else if (e.key === "Tab" && e.target.name === "title") {
      // Move to assignee field
      e.preventDefault();
      setShowUserDropdown(true);
    }
  };

  const canAssignToOthers =
    currentUser.role === "admin" || currentUser.role === "team";

  return (
    <>
      {/* Backdrop */}
      <div
        className="fixed inset-0 bg-black/30 backdrop-blur-sm bg-opacity-50 z-40 overlay-animate"
        onClick={onClose}
      />

      {/* Drawer */}
      <div className="fixed top-0 right-0 h-full w-1/2 bg-white shadow-2xl z-50 overflow-y-auto drawer-animate">
        <div className="flex flex-col h-full">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-indigo-50">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                <span className="text-white text-lg">üìù</span>
              </div>
              <div>
                <h2 className="text-xl font-bold text-gray-900">
                  Add Sub-task
                </h2>
                <p className="text-sm text-gray-600">
                  Parent: {parentTask.title}
                </p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 p-2 rounded-full hover:bg-gray-100 transition-colors"
            >
              <svg
                className="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>

          {/* Form Content */}
          <div className="flex-1 p-6">
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Sub-task Name */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Sub-task Name *
                </label>
                <input
                  type="text"
                  name="title"
                  value={formData.title}
                  onChange={(e) =>
                    setFormData((prev) => ({ ...prev, title: e.target.value }))
                  }
                  onKeyDown={handleKeyPress}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                  placeholder="Enter sub-task name..."
                  maxLength={100}
                  autoFocus
                  required
                />
                <p className="text-xs text-gray-500 mt-1">
                  {formData.title.length}/100 characters
                </p>
              </div>

              {/* Assignee Search Dropdown */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Assign to *
                </label>
                <div className="relative">
                  <div
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg cursor-pointer flex items-center justify-between hover:border-blue-400 transition-colors"
                    onClick={() => setShowUserDropdown(!showUserDropdown)}
                  >
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                        <span className="text-xs font-medium text-gray-600">
                          {teamMembers.find((m) => m.id === formData.assigneeId)
                            ?.avatar || "U"}
                        </span>
                      </div>
                      <span className="text-gray-900">{formData.assignee}</span>
                    </div>
                    <svg
                      className="w-5 h-5 text-gray-400"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M19 9l-7 7-7-7"
                      />
                    </svg>
                  </div>

                  {showUserDropdown && (
                    <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-10 max-h-48 overflow-y-auto">
                      <div className="p-3 border-b border-gray-200">
                        <input
                          type="text"
                          placeholder="Search users..."
                          value={searchTerm}
                          onChange={(e) => setSearchTerm(e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded text-sm focus:ring-1 focus:ring-blue-500 focus:border-transparent"
                        />
                      </div>
                      <div className="py-1">
                        {filteredMembers.map((member) => (
                          <button
                            key={member.id}
                            type="button"
                            disabled={
                              !canAssignToOthers && member.id !== currentUser.id
                            }
                            className={`w-full text-left px-4 py-3 hover:bg-gray-50 flex items-center space-x-3 transition-colors ${
                              !canAssignToOthers && member.id !== currentUser.id
                                ? "opacity-50 cursor-not-allowed"
                                : ""
                            } ${
                              formData.assigneeId === member.id
                                ? "bg-blue-50 text-blue-700"
                                : ""
                            }`}
                            onClick={() => {
                              if (
                                canAssignToOthers ||
                                member.id === currentUser.id
                              ) {
                                setFormData((prev) => ({
                                  ...prev,
                                  assignee: member.name,
                                  assigneeId: member.id,
                                }));
                                setShowUserDropdown(false);
                                setSearchTerm("");
                              }
                            }}
                          >
                            <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                              <span className="text-xs font-medium text-gray-600">
                                {member.avatar}
                              </span>
                            </div>
                            <div className="flex-1">
                              <div className="font-medium">{member.name}</div>
                              {member.id === currentUser.id && (
                                <div className="text-xs text-gray-500">You</div>
                              )}
                            </div>
                            {!canAssignToOthers &&
                              member.id !== currentUser.id && (
                                <span className="text-xs text-gray-400">
                                  No permission
                                </span>
                              )}
                          </button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
                {!canAssignToOthers && (
                  <p className="text-xs text-orange-600 mt-1">
                    You can only assign sub-tasks to yourself. Contact admin for
                    team assignment permissions.
                  </p>
                )}
              </div>

              {/* Priority */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Priority (optional)
                </label>
                <select
                  value={formData.priority}
                  onChange={(e) =>
                    setFormData((prev) => ({
                      ...prev,
                      priority: e.target.value,
                    }))
                  }
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                >
                  <option value="low">Low (30 days)</option>
                  <option value="medium">Medium (14 days)</option>
                  <option value="high">High (7 days)</option>
                  <option value="critical">Critical (2 days)</option>
                  <option value="urgent">Urgent (2 days)</option>
                </select>
              </div>

              {/* Due Date */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Due Date
                  <span className="text-xs text-blue-600 ml-2">
                    (Auto-suggested from priority)
                  </span>
                </label>
                <input
                  type="date"
                  value={formData.dueDate}
                  onChange={(e) =>
                    setFormData((prev) => ({
                      ...prev,
                      dueDate: e.target.value,
                    }))
                  }
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Due date automatically calculated based on priority. You can
                  override this date.
                </p>
              </div>

              {/* Description */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Description (optional)
                </label>
                <ReactQuill
                  className="custom-editor"
                  value={formData.description}
                  onChange={(e) =>
                    setFormData((prev) => ({
                      ...prev,
                      description: e.target.value,
                    }))
                  }
                />

                <p className="text-xs text-gray-500 mt-1">
                  {formData.description.length}/500 characters
                </p>
              </div>

              {/* Attachments */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Attachments (optional)
                </label>
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors">
                  <svg
                    className="mx-auto h-12 w-12 text-gray-400 mb-4"
                    stroke="currentColor"
                    fill="none"
                    viewBox="0 0 48 48"
                  >
                    <path
                      d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                      strokeWidth={2}
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  <div className="mt-4">
                    <label className="cursor-pointer">
                      <span className="text-blue-600 hover:text-blue-500 font-medium">
                        Upload files
                      </span>
                      <input
                        type="file"
                        className="sr-only"
                        multiple
                        onChange={(e) => {
                          const files = Array.from(e.target.files);
                          setFormData((prev) => ({
                            ...prev,
                            attachments: files,
                          }));
                        }}
                      />
                    </label>
                    <p className="text-gray-500"> or drag and drop</p>
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    PNG, JPG, PDF up to 10MB
                  </p>
                </div>
                {formData.attachments && formData.attachments.length > 0 && (
                  <div className="mt-3">
                    <p className="text-sm text-gray-600 mb-2">
                      Selected files:
                    </p>
                    <div className="space-y-1">
                      {Array.from(formData.attachments).map((file, index) => (
                        <div
                          key={index}
                          className="flex items-center justify-between bg-gray-50 px-3 py-2 rounded"
                        >
                          <span className="text-sm text-gray-700 truncate">
                            {file.name}
                          </span>
                          <button
                            type="button"
                            onClick={() => {
                              const newFiles = Array.from(
                                formData.attachments,
                              ).filter((_, i) => i !== index);
                              setFormData((prev) => ({
                                ...prev,
                                attachments: newFiles,
                              }));
                            }}
                            className="text-red-500 cursor-pointer hover:text-red-700 text-sm ml-2"
                          >
                            ‚úï
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              {/* Inheritance Info */}
              <div className="bg-blue-50 p-4 rounded-lg">
                <h4 className="text-sm font-medium text-blue-800 mb-2">
                  Inherited from Parent Task
                </h4>
                <div className="text-xs text-blue-700 space-y-1">
                  <div>‚Ä¢ Visibility: {parentTask.visibility || "Private"}</div>
                  <div>‚Ä¢ Parent Due Date: {parentTask.dueDate}</div>
                </div>
              </div>
            </form>
          </div>

          {/* Footer Actions */}
          <div className="border-t border-gray-200 p-6 bg-gray-50">
            <div className="flex space-x-3">
              <button
                type="button"
                onClick={onClose}
                className="flex-1 px-4 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-100 transition-colors font-medium"
              >
                Cancel
              </button>
              <button
                onClick={handleSubmit}
                disabled={!formData.title.trim()}
                className="flex-1 px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors font-medium"
              >
                Create Sub-task
              </button>
            </div>
            <div className="mt-3 text-center">
              <p className="text-xs text-gray-500">
                Press{" "}
                <kbd className="px-1 py-0.5 bg-gray-200 rounded text-xs">
                  Enter
                </kbd>{" "}
                to create ‚Ä¢{" "}
                <kbd className="px-1 py-0.5 bg-gray-200 rounded text-xs">
                  Esc
                </kbd>{" "}
                to cancel
              </p>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
