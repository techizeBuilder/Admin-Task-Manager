
function CoreInfoPanel({ moreInfo, setMoreInfo, task, onUpdate, permissions }) {
  return (
    <div className="core-info-panel p-4">
      <div className="space-y-6">
        {/* Task Overview */}
        <div className="bg-white rounded-xl border border-gray-200 p-6">
          <div className="flex justify-between  items-center gap-3 mb-4">
            <div className="fex items-center gap-3">
              <div className="w-10 h-10 bg-blue-100 rounded-xl flex items-center justify-center">
                <span className="text-blue-600 text-lg">
                  {task.taskType === "milestone"
                    ? "üéØ"
                    : task.taskType === "approval"
                      ? "‚úÖ"
                      : "üìã"}
                </span>
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-900">
                  Task Overview
                </h3>
                <p className="text-sm text-gray-600">
                  Complete task information and details
                </p>
              </div>
            </div>

            <button
              className="action-btn primary "
              onClick={() => setMoreInfo(true)}
            >
              View More
            </button>
          </div>

          {/* Reminders */}
          {task.reminders && task.reminders.length > 0 && (
            <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="flex items-center gap-2">
                <span className="text-yellow-600">‚è∞</span>
                <span className="font-medium text-yellow-800">
                  Active Reminders:
                </span>
              </div>
              {task.reminders.map((reminder, index) => (
                <div key={index} className="mt-2 text-sm text-yellow-700">
                  {reminder.message} - {reminder.date}
                </div>
              ))}
            </div>
          )}

          {/* Description */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Description
            </label>
            <EditableTextArea
              value={task.description}
              onSave={(newDesc) => onUpdate({ ...task, description: newDesc })}
              canEdit={permissions.canEdit}
              placeholder="Add task description..."
            />
          </div>
        </div>
        {moreInfo ? (
          <div className="border border-gray-200 rounded-xl p-6 space-y-6">
            <div className="flex justify-between items-center">
              <label className="text-md font-bold text-gray-600">
                Detailed View
              </label>
              <span className="text-sm text-gray-900">
                <CircleX color="red" onClick={() => setMoreInfo(false)} />
              </span>
            </div>
            {/* Basic Information Grid */}
            <div className="grid grid-cols-3 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {/* Task Details Card */}
              <div className="bg-white rounded-xl border border-gray-200 p-4">
                <h4 className="text-md font-semibold text-gray-900  flex items-center gap-2">
                  <span className="text-blue-500">üìù</span>
                  Task Details
                </h4>
                <div className="space-y-3 mt-4">
                  <div className="space-y-2 flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Type:
                    </label>
                    <div className="flex items-center gap-2">
                      <span className="text-lg">
                        {task.taskType === "regular"
                          ? "üìã"
                          : task.taskType === "recurring"
                            ? "üîÑ"
                            : task.taskType === "milestone"
                              ? "üéØ"
                              : task.taskType === "approval"
                                ? "‚úÖ"
                                : "üìã"}
                      </span>
                      <span className="text-sm text-gray-900 capitalize">
                        {task.taskType === "regular"
                          ? "Regular Task"
                          : task.taskType === "recurring"
                            ? "Recurring Task"
                            : task.taskType === "milestone"
                              ? "Milestone"
                              : task.taskType === "approval"
                                ? "Approval Task"
                                : "Regular Task"}
                      </span>
                      {task.colorCode && (
                        <div
                          className="w-4 h-4 rounded-full border border-gray-300"
                          style={{ backgroundColor: task.colorCode }}
                          title={`Task Color: ${task.colorCode}`}
                        />
                      )}
                    </div>
                  </div>

                  {/* Color Code Display */}
                  <div className="space-y-2 flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Color Code:
                    </label>
                    <div className="flex items-center gap-2">
                      <div
                        className="w-6 h-6 rounded-full border border-gray-300"
                        style={{ backgroundColor: task.colorCode || "#6B7280" }}
                      />
                      <span className="text-sm text-gray-900 font-mono">
                        {task.colorCode || "#6B7280"}
                      </span>
                    </div>
                  </div>
                  <div className="flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Visibility:
                    </label>
                    <span className="text-sm text-gray-900 capitalize">
                      {task.visibility || "Private"}
                    </span>
                  </div>
                </div>
              </div>

              {/* Timeline Card */}
              <div className="bg-white rounded-xl border border-gray-200 p-4">
                <h4 className="text-md font-semibold text-gray-900 mb-3 flex items-center gap-2 mb-3">
                  <span className="text-green-500">üìÖ</span>
                  Timeline
                </h4>
                <div className="space-y-3 mt-4">
                  <div className="flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Start Date:
                    </label>
                    <EditableDateField
                      value={task.startDate}
                      onSave={(newDate) =>
                        onUpdate({ ...task, startDate: newDate })
                      }
                      canEdit={permissions.canEdit}
                    />
                  </div>
                  <div className="flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Due Date:
                    </label>
                    <EditableDateField
                      value={task.dueDate}
                      onSave={(newDate) =>
                        onUpdate({ ...task, dueDate: newDate })
                      }
                      canEdit={permissions.canEdit}
                    />
                  </div>
                  <div className="flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Time Estimate:
                    </label>
                    <EditableTextField
                      value={task.timeEstimate}
                      onSave={(newEstimate) =>
                        onUpdate({ ...task, timeEstimate: newEstimate })
                      }
                      canEdit={permissions.canEdit}
                    />
                  </div>
                </div>
              </div>

              {/* Creation Info Card */}
              <div className="bg-white rounded-xl border border-gray-200 p-4">
                <h4 className="text-md font-semibold text-gray-900 mb-3 flex items-center gap-2 mb-3">
                  <span className="text-purple-500">üë§</span>
                  Creation Info
                </h4>
                <div className="space-y-3 mt-4">
                  <div className="flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Created By:
                    </label>
                    <span className="text-sm text-gray-900">
                      {task.createdBy}
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Created:
                    </label>
                    <span className="text-sm text-gray-900">
                      {new Date(task.createdAt).toLocaleDateString()}
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Last Updated:
                    </label>
                    <span className="text-sm text-gray-900">
                      {new Date(task.updatedAt).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Assignment & Status Grid */}
            <div className="grid grid-cols-3 md:grid-cols-3 gap-4">
              {/* Assignment Card */}
              <div className="bg-white rounded-xl border border-gray-200 p-4">
                <h4 className="text-md font-semibold text-gray-900 mb-3 flex items-center gap-2">
                  <span className="text-orange-500">üë•</span>
                  Assignment & Status
                </h4>
                <div className="space-y-3 mt-4">
                  <div className="flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Assignee:
                    </label>
                    <span className="text-sm text-gray-900">
                      {task.assignee}
                    </span>
                  </div>

                  <div className="flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Current Status:
                    </label>
                    <span
                      className={`px-2 py-1 rounded-full text-xs font-medium ${
                        task.status === "DONE"
                          ? "bg-green-100 text-green-800"
                          : task.status === "INPROGRESS"
                            ? "bg-blue-100 text-blue-800"
                            : task.status === "ONHOLD"
                              ? "bg-yellow-100 text-yellow-800"
                              : task.status === "CANCELLED"
                                ? "bg-red-100 text-red-800"
                                : "bg-gray-100 text-gray-800"
                      }`}
                    >
                      {getStatusLabel(task.status)}
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Priority:
                    </label>
                    <span
                      className={`px-2 py-1 rounded-full text-xs font-medium ${
                        task.priority === "critical"
                          ? "bg-red-100 text-red-800"
                          : task.priority === "high"
                            ? "bg-orange-100 text-orange-800"
                            : task.priority === "medium"
                              ? "bg-yellow-100 text-yellow-800"
                              : "bg-green-100 text-green-800"
                      }`}
                    >
                      {task.priority
                        ? task.priority.charAt(0).toUpperCase() +
                          task.priority.slice(1)
                        : "Medium"}
                    </span>
                  </div>
                </div>
              </div>

              {/* Collaborators & Tags Card */}
              <div className="bg-white rounded-xl border border-gray-200 p-4">
                <h4 className="text-md font-semibold text-gray-900 mb-3 flex items-center gap-2">
                  <span className="text-indigo-500">üè∑Ô∏è</span>
                  Collaborators & Tags
                </h4>
                <div className="space-y-3 mt-4">
                  <div>
                    <label className="text-sm font-medium text-gray-600 block mb-2">
                      Collaborators:
                    </label>
                    <div className="flex flex-wrap gap-1">
                      {task.collaborators && task.collaborators.length > 0 ? (
                        task.collaborators.map((collab, index) => (
                          <span
                            key={index}
                            className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs"
                          >
                            {collab}
                          </span>
                        ))
                      ) : (
                        <span className="text-sm text-gray-500">
                          No collaborators
                        </span>
                      )}
                    </div>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-600 block mb-2">
                      Tags:
                    </label>
                    <div className="flex flex-wrap gap-1">
                      {task.tags && task.tags.length > 0 ? (
                        task.tags.map((tag, index) => (
                          <span
                            key={index}
                            className="px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs"
                          >
                            #{tag}
                          </span>
                        ))
                      ) : (
                        <span className="text-sm text-gray-500">No tags</span>
                      )}
                    </div>
                  </div>
                </div>
              </div>
              {/* Relationships & Hierarchy */}
              <div className="bg-white rounded-xl border border-gray-200 p-4">
                <h4 className="text-md font-semibold text-gray-900 mb-3 flex items-center gap-2">
                  <span className="text-cyan-500">üîó</span>
                  Relationships & Hierarchy
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                  <div className="space-y-2 flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Parent Task:
                    </label>
                    {task.parentTaskId ? (
                      <button
                        className="text-blue-600 hover:underline text-sm"
                        onClick={() =>
                          console.log(`Open parent task ${task.parentTaskId}`)
                        }
                      >
                        #{task.parentTaskId}
                      </button>
                    ) : (
                      <span className="text-sm text-gray-500">None</span>
                    )}
                  </div>
                  <div className="space-y-2 flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Sub-tasks Count:
                    </label>
                    <span className="text-sm text-gray-900">
                      {task.subtasks?.length || 0}
                    </span>
                  </div>
                  <div className="space-y-2 flex justify-between items-center">
                    <label className="text-sm font-medium text-gray-600">
                      Linked Items:
                    </label>
                    <span className="text-sm text-gray-900">
                      {task.linkedItems?.length || 0}
                    </span>
                  </div>
                </div>
                {task.isRecurring && task.recurringFromTaskId && (
                  <div className="mt-3 p-3 bg-blue-50 rounded-lg">
                    <div className="flex items-center gap-2">
                      <span className="text-blue-600">üîÅ</span>
                      <span className="text-sm font-medium text-blue-800">
                        Recurring Task
                      </span>
                    </div>
                    <button
                      className="text-blue-600 hover:underline text-sm mt-1"
                      onClick={() =>
                        console.log(
                          `Open master task ${task.recurringFromTaskId}`,
                        )
                      }
                    >
                      Master Task: #{task.recurringFromTaskId}
                    </button>
                  </div>
                )}
              </div>
            </div>

            {/* Special Properties */}
            <div className="grid grid-cols-2 md:grid-cols-2 gap-4">
              {/* Risk Information */}
              {task.isRisky && (
                <div className="bg-red-50 border border-red-200 rounded-xl p-4">
                  <h4 className="text-md font-semibold text-red-900 mb-3 flex items-center gap-2">
                    <span className="text-red-600">‚ö†Ô∏è</span>
                    Risk Information
                  </h4>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <span className="px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs font-medium">
                        At Risk
                      </span>
                    </div>
                    {task.riskNote && (
                      <div>
                        <label className="text-sm font-medium text-red-700">
                          Risk Note:
                        </label>
                        <p className="text-sm text-red-600 mt-1">
                          {task.riskNote}
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Snooze Information */}
              {task.snoozedUntil && (
                <div className="bg-orange-50 border border-orange-200 rounded-xl p-4">
                  <h4 className="text-md font-semibold text-orange-900 mb-3 flex items-center gap-2">
                    <span className="text-orange-600">üò¥</span>
                    Snooze Information
                  </h4>
                  <div className="space-y-2">
                    <div>
                      <label className="text-sm font-medium text-orange-700">
                        Snoozed Until:
                      </label>
                      <p className="text-sm text-orange-600">
                        {new Date(task.snoozedUntil).toLocaleString()}
                      </p>
                    </div>
                    {task.snoozeNote && (
                      <div>
                        <label className="text-sm font-medium text-orange-700">
                          Snooze Note:
                        </label>
                        <p className="text-sm text-orange-600">
                          {task.snoozeNote}
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>

            {/* Milestone Progress */}
            {task.taskType === "milestone" && task.milestones?.length > 0 && (
              <div className="bg-purple-50 border border-purple-200 rounded-xl p-4">
                <h4 className="text-md font-semibold text-purple-900 mb-3 flex items-center gap-2">
                  <span className="text-purple-600">üéØ</span>
                  Milestone Progress
                </h4>
                <div className="space-y-3">
                  {task.milestones.map((milestone) => (
                    <div
                      key={milestone.id}
                      className="flex items-center justify-between p-3 bg-white rounded-lg border border-purple-100"
                    >
                      <div className="flex items-center gap-3">
                        <span className="text-lg">
                          {milestone.status === "completed"
                            ? "‚úÖ"
                            : milestone.status === "in-progress"
                              ? "üîÑ"
                              : "‚≠ê"}
                        </span>
                        <div>
                          <p className="font-medium text-gray-900">
                            {milestone.title}
                          </p>
                          <p className="text-sm text-gray-600">
                            {milestone.date}
                          </p>
                        </div>
                      </div>
                      <span
                        className={`px-2 py-1 rounded-full text-xs font-medium ${
                          milestone.status === "completed"
                            ? "bg-green-100 text-green-800"
                            : milestone.status === "in-progress"
                              ? "bg-blue-100 text-blue-800"
                              : "bg-gray-100 text-gray-800"
                        }`}
                      >
                        {milestone.status.replace("-", " ")}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Approval Status */}
            {task.taskType === "approval" && (
              <div className="bg-green-50 border border-green-200 rounded-xl p-4">
                <h4 className="text-md font-semibold text-green-900 mb-3 flex items-center gap-2">
                  <span className="text-green-600">‚úÖ</span>
                  Approval Status
                </h4>
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <span
                      className={`px-3 py-1 rounded-full text-sm font-medium ${
                        task.approvalStatus === "approved"
                          ? "bg-green-100 text-green-800"
                          : task.approvalStatus === "rejected"
                            ? "bg-red-100 text-red-800"
                            : "bg-yellow-100 text-yellow-800"
                      }`}
                    >
                      {task.approvalStatus || "Pending Approval"}
                    </span>
                  </div>
                  {task.isApprovalTask && (
                    <p className="text-sm text-green-600">
                      This task requires approval to proceed
                    </p>
                  )}
                </div>
              </div>
            )}

            {/* Forms Information */}
            {task.forms && task.forms.length > 0 && (
              <div className="bg-indigo-50 border border-indigo-200 rounded-xl p-4">
                <h4 className="text-md font-semibold text-indigo-900 mb-3 flex items-center gap-2">
                  <span className="text-indigo-600">üìÑ</span>
                  Attached Forms ({task.forms.length})
                </h4>
                <div className="space-y-2 mt-4">
                  {task.forms.map((form) => (
                    <div
                      key={form.id}
                      className="flex items-center justify-between p-2 bg-white rounded border border-indigo-100"
                    >
                      <div>
                        <p className="font-medium text-gray-900">
                          {form.title}
                        </p>
                        <p className="text-sm text-gray-600">{form.type}</p>
                      </div>
                      <span
                        className={`px-2 py-1 rounded-full text-xs font-medium ${
                          form.status === "completed"
                            ? "bg-green-100 text-green-800"
                            : form.status === "in-progress"
                              ? "bg-blue-100 text-blue-800"
                              : "bg-gray-100 text-gray-800"
                        }`}
                      >
                        {form.status.replace("-", " ")}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ) : null}
      </div>
    </div>
  );
}
